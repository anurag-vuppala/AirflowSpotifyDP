[2022-01-31 00:00:11,573] {processor.py:163} INFO - Started process (PID=32707) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:00:11,573] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:00:11,574] {logging_mixin.py:109} INFO - [2022-01-31 00:00:11,574] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:00:12,388] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:00:12,411] {logging_mixin.py:109} INFO - [2022-01-31 00:00:12,411] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:00:12,423] {logging_mixin.py:109} INFO - [2022-01-31 00:00:12,423] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:00:12,431] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.859 seconds
[2022-01-31 00:00:44,405] {processor.py:163} INFO - Started process (PID=32761) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:00:44,405] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:00:44,405] {logging_mixin.py:109} INFO - [2022-01-31 00:00:44,405] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:00:44,779] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:00:44,796] {logging_mixin.py:109} INFO - [2022-01-31 00:00:44,796] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:00:44,807] {logging_mixin.py:109} INFO - [2022-01-31 00:00:44,807] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:00:44,825] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.421 seconds
[2022-01-31 00:01:16,613] {processor.py:163} INFO - Started process (PID=32804) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:01:16,615] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:01:16,615] {logging_mixin.py:109} INFO - [2022-01-31 00:01:16,615] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:01:17,006] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:01:17,023] {logging_mixin.py:109} INFO - [2022-01-31 00:01:17,023] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:01:17,034] {logging_mixin.py:109} INFO - [2022-01-31 00:01:17,034] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:01:17,051] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.438 seconds
[2022-01-31 00:01:48,826] {processor.py:163} INFO - Started process (PID=32842) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:01:48,826] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:01:48,826] {logging_mixin.py:109} INFO - [2022-01-31 00:01:48,826] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:01:49,618] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:01:49,639] {logging_mixin.py:109} INFO - [2022-01-31 00:01:49,639] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:01:49,650] {logging_mixin.py:109} INFO - [2022-01-31 00:01:49,650] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:01:49,657] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.832 seconds
[2022-01-31 00:02:21,416] {processor.py:163} INFO - Started process (PID=32880) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:02:21,416] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:02:21,417] {logging_mixin.py:109} INFO - [2022-01-31 00:02:21,416] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:02:22,224] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:02:22,245] {logging_mixin.py:109} INFO - [2022-01-31 00:02:22,245] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:02:22,257] {logging_mixin.py:109} INFO - [2022-01-31 00:02:22,257] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:02:22,264] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.849 seconds
[2022-01-31 00:02:54,188] {processor.py:163} INFO - Started process (PID=32923) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:02:54,189] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:02:54,189] {logging_mixin.py:109} INFO - [2022-01-31 00:02:54,189] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:02:54,997] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:02:55,017] {logging_mixin.py:109} INFO - [2022-01-31 00:02:55,017] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:02:55,028] {logging_mixin.py:109} INFO - [2022-01-31 00:02:55,028] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:02:55,036] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.849 seconds
[2022-01-31 00:03:27,335] {processor.py:163} INFO - Started process (PID=32962) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:03:27,336] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:03:27,337] {logging_mixin.py:109} INFO - [2022-01-31 00:03:27,336] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:03:28,144] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:03:28,164] {logging_mixin.py:109} INFO - [2022-01-31 00:03:28,164] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:03:28,175] {logging_mixin.py:109} INFO - [2022-01-31 00:03:28,175] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:03:28,182] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.848 seconds
[2022-01-31 00:03:59,903] {processor.py:163} INFO - Started process (PID=33002) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:03:59,903] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:03:59,904] {logging_mixin.py:109} INFO - [2022-01-31 00:03:59,904] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:04:00,304] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:04:00,325] {logging_mixin.py:109} INFO - [2022-01-31 00:04:00,325] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:04:00,343] {logging_mixin.py:109} INFO - [2022-01-31 00:04:00,343] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:04:00,353] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.451 seconds
[2022-01-31 00:04:32,294] {processor.py:163} INFO - Started process (PID=33045) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:04:32,294] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:04:32,295] {logging_mixin.py:109} INFO - [2022-01-31 00:04:32,295] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:04:33,137] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:04:33,158] {logging_mixin.py:109} INFO - [2022-01-31 00:04:33,158] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:04:33,170] {logging_mixin.py:109} INFO - [2022-01-31 00:04:33,169] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:04:33,179] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.885 seconds
[2022-01-31 00:05:05,999] {processor.py:163} INFO - Started process (PID=33118) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:05:06,000] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:05:06,000] {logging_mixin.py:109} INFO - [2022-01-31 00:05:06,000] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:05:06,815] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:05:06,835] {logging_mixin.py:109} INFO - [2022-01-31 00:05:06,835] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:05:06,847] {logging_mixin.py:109} INFO - [2022-01-31 00:05:06,847] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:05:06,854] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.857 seconds
[2022-01-31 00:05:39,404] {processor.py:163} INFO - Started process (PID=33195) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:05:39,405] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:05:39,406] {logging_mixin.py:109} INFO - [2022-01-31 00:05:39,406] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:05:40,232] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:05:40,252] {logging_mixin.py:109} INFO - [2022-01-31 00:05:40,252] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:05:40,264] {logging_mixin.py:109} INFO - [2022-01-31 00:05:40,263] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:05:40,273] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.869 seconds
[2022-01-31 00:06:12,845] {processor.py:163} INFO - Started process (PID=33239) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:06:12,846] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:06:12,847] {logging_mixin.py:109} INFO - [2022-01-31 00:06:12,847] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:06:13,831] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:06:13,854] {logging_mixin.py:109} INFO - [2022-01-31 00:06:13,854] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:06:13,865] {logging_mixin.py:109} INFO - [2022-01-31 00:06:13,865] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:06:13,873] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.028 seconds
[2022-01-31 00:06:45,630] {processor.py:163} INFO - Started process (PID=33277) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:06:45,631] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:06:45,631] {logging_mixin.py:109} INFO - [2022-01-31 00:06:45,631] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:06:46,007] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:06:46,024] {logging_mixin.py:109} INFO - [2022-01-31 00:06:46,024] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:06:46,035] {logging_mixin.py:109} INFO - [2022-01-31 00:06:46,035] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:06:46,053] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.423 seconds
[2022-01-31 00:07:17,886] {processor.py:163} INFO - Started process (PID=33315) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:07:17,886] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:07:17,887] {logging_mixin.py:109} INFO - [2022-01-31 00:07:17,887] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:07:18,588] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:07:18,607] {logging_mixin.py:109} INFO - [2022-01-31 00:07:18,607] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:07:18,619] {logging_mixin.py:109} INFO - [2022-01-31 00:07:18,619] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:07:18,627] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.742 seconds
[2022-01-31 00:07:50,397] {processor.py:163} INFO - Started process (PID=33352) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:07:50,397] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:07:50,398] {logging_mixin.py:109} INFO - [2022-01-31 00:07:50,398] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:07:50,779] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:07:50,797] {logging_mixin.py:109} INFO - [2022-01-31 00:07:50,796] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:07:50,808] {logging_mixin.py:109} INFO - [2022-01-31 00:07:50,808] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:07:50,825] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.429 seconds
[2022-01-31 00:08:22,787] {processor.py:163} INFO - Started process (PID=33396) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:08:22,788] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:08:22,788] {logging_mixin.py:109} INFO - [2022-01-31 00:08:22,788] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:08:23,657] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:08:23,678] {logging_mixin.py:109} INFO - [2022-01-31 00:08:23,677] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:08:23,688] {logging_mixin.py:109} INFO - [2022-01-31 00:08:23,688] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:08:23,698] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.912 seconds
[2022-01-31 00:08:55,433] {processor.py:163} INFO - Started process (PID=33437) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:08:55,433] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:08:55,434] {logging_mixin.py:109} INFO - [2022-01-31 00:08:55,434] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:08:55,818] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:08:55,840] {logging_mixin.py:109} INFO - [2022-01-31 00:08:55,840] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:08:55,853] {logging_mixin.py:109} INFO - [2022-01-31 00:08:55,853] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:08:55,861] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.429 seconds
[2022-01-31 00:09:28,149] {processor.py:163} INFO - Started process (PID=33474) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:09:28,150] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:09:28,150] {logging_mixin.py:109} INFO - [2022-01-31 00:09:28,150] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:09:28,969] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:09:28,989] {logging_mixin.py:109} INFO - [2022-01-31 00:09:28,989] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:09:29,001] {logging_mixin.py:109} INFO - [2022-01-31 00:09:29,001] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:09:29,008] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.860 seconds
[2022-01-31 00:10:01,190] {processor.py:163} INFO - Started process (PID=33511) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:10:01,190] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:10:01,190] {logging_mixin.py:109} INFO - [2022-01-31 00:10:01,190] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:10:01,978] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:10:01,999] {logging_mixin.py:109} INFO - [2022-01-31 00:10:01,999] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:10:02,010] {logging_mixin.py:109} INFO - [2022-01-31 00:10:02,010] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:10:02,018] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.829 seconds
[2022-01-31 00:10:33,784] {processor.py:163} INFO - Started process (PID=33548) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:10:33,785] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:10:33,785] {logging_mixin.py:109} INFO - [2022-01-31 00:10:33,785] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:10:34,189] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:10:34,210] {logging_mixin.py:109} INFO - [2022-01-31 00:10:34,210] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:10:34,229] {logging_mixin.py:109} INFO - [2022-01-31 00:10:34,229] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:10:34,238] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.454 seconds
[2022-01-31 00:11:06,780] {processor.py:163} INFO - Started process (PID=33589) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:11:06,781] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:11:06,782] {logging_mixin.py:109} INFO - [2022-01-31 00:11:06,781] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:11:07,638] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:11:07,660] {logging_mixin.py:109} INFO - [2022-01-31 00:11:07,659] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:11:07,673] {logging_mixin.py:109} INFO - [2022-01-31 00:11:07,673] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:11:07,683] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.904 seconds
[2022-01-31 00:11:40,075] {processor.py:163} INFO - Started process (PID=33627) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:11:40,076] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:11:40,077] {logging_mixin.py:109} INFO - [2022-01-31 00:11:40,077] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:11:40,798] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:11:40,815] {logging_mixin.py:109} INFO - [2022-01-31 00:11:40,815] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:11:40,826] {logging_mixin.py:109} INFO - [2022-01-31 00:11:40,826] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:11:40,835] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.761 seconds
[2022-01-31 00:12:12,559] {processor.py:163} INFO - Started process (PID=33664) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:12:12,560] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:12:12,560] {logging_mixin.py:109} INFO - [2022-01-31 00:12:12,560] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:12:12,937] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:12:12,955] {logging_mixin.py:109} INFO - [2022-01-31 00:12:12,954] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:12:12,966] {logging_mixin.py:109} INFO - [2022-01-31 00:12:12,966] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:12:12,983] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.425 seconds
[2022-01-31 00:12:45,582] {processor.py:163} INFO - Started process (PID=33715) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:12:45,583] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:12:45,584] {logging_mixin.py:109} INFO - [2022-01-31 00:12:45,584] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:12:46,640] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:12:46,664] {logging_mixin.py:109} INFO - [2022-01-31 00:12:46,664] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:12:46,679] {logging_mixin.py:109} INFO - [2022-01-31 00:12:46,679] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:12:46,687] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.106 seconds
[2022-01-31 00:13:19,193] {processor.py:163} INFO - Started process (PID=33773) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:13:19,194] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:13:19,194] {logging_mixin.py:109} INFO - [2022-01-31 00:13:19,194] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:13:20,004] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:13:20,024] {logging_mixin.py:109} INFO - [2022-01-31 00:13:20,023] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:13:20,035] {logging_mixin.py:109} INFO - [2022-01-31 00:13:20,034] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:13:20,042] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.849 seconds
[2022-01-31 00:13:52,347] {processor.py:163} INFO - Started process (PID=33780) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:13:52,347] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:13:52,348] {logging_mixin.py:109} INFO - [2022-01-31 00:13:52,347] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:13:53,198] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:13:53,224] {logging_mixin.py:109} INFO - [2022-01-31 00:13:53,224] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:13:53,236] {logging_mixin.py:109} INFO - [2022-01-31 00:13:53,236] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:13:53,244] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.898 seconds
[2022-01-31 00:14:25,503] {processor.py:163} INFO - Started process (PID=33783) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:14:25,503] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:14:25,503] {logging_mixin.py:109} INFO - [2022-01-31 00:14:25,503] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:14:26,314] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:14:26,334] {logging_mixin.py:109} INFO - [2022-01-31 00:14:26,334] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:14:26,345] {logging_mixin.py:109} INFO - [2022-01-31 00:14:26,345] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:14:26,353] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.851 seconds
[2022-01-31 00:14:58,716] {processor.py:163} INFO - Started process (PID=33784) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:14:58,717] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:14:58,717] {logging_mixin.py:109} INFO - [2022-01-31 00:14:58,717] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:14:59,502] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:14:59,525] {logging_mixin.py:109} INFO - [2022-01-31 00:14:59,525] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:14:59,539] {logging_mixin.py:109} INFO - [2022-01-31 00:14:59,539] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:14:59,548] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.832 seconds
[2022-01-31 00:15:31,870] {processor.py:163} INFO - Started process (PID=33786) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:15:31,871] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:15:31,871] {logging_mixin.py:109} INFO - [2022-01-31 00:15:31,871] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:15:32,672] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:15:32,692] {logging_mixin.py:109} INFO - [2022-01-31 00:15:32,692] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:15:32,703] {logging_mixin.py:109} INFO - [2022-01-31 00:15:32,703] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:15:32,711] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.842 seconds
[2022-01-31 00:16:04,444] {processor.py:163} INFO - Started process (PID=33791) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:16:04,445] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:16:04,445] {logging_mixin.py:109} INFO - [2022-01-31 00:16:04,445] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:16:04,816] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:16:04,833] {logging_mixin.py:109} INFO - [2022-01-31 00:16:04,833] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:16:04,844] {logging_mixin.py:109} INFO - [2022-01-31 00:16:04,844] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:16:04,862] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.418 seconds
[2022-01-31 00:16:36,545] {processor.py:163} INFO - Started process (PID=33793) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:16:36,545] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:16:36,545] {logging_mixin.py:109} INFO - [2022-01-31 00:16:36,545] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:16:36,921] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:16:36,937] {logging_mixin.py:109} INFO - [2022-01-31 00:16:36,937] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:16:36,948] {logging_mixin.py:109} INFO - [2022-01-31 00:16:36,948] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:16:36,968] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.425 seconds
[2022-01-31 00:17:08,727] {processor.py:163} INFO - Started process (PID=33795) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:17:08,727] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:17:08,728] {logging_mixin.py:109} INFO - [2022-01-31 00:17:08,727] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:17:09,109] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:17:09,126] {logging_mixin.py:109} INFO - [2022-01-31 00:17:09,126] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:17:09,137] {logging_mixin.py:109} INFO - [2022-01-31 00:17:09,137] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:17:09,155] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.429 seconds
[2022-01-31 00:17:40,854] {processor.py:163} INFO - Started process (PID=33796) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:17:40,855] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:17:40,855] {logging_mixin.py:109} INFO - [2022-01-31 00:17:40,855] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:17:41,228] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:17:41,246] {logging_mixin.py:109} INFO - [2022-01-31 00:17:41,246] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:17:41,257] {logging_mixin.py:109} INFO - [2022-01-31 00:17:41,257] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:17:41,274] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.420 seconds
[2022-01-31 00:18:12,952] {processor.py:163} INFO - Started process (PID=33797) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:18:12,953] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:18:12,953] {logging_mixin.py:109} INFO - [2022-01-31 00:18:12,953] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:18:13,330] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:18:13,347] {logging_mixin.py:109} INFO - [2022-01-31 00:18:13,347] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:18:13,358] {logging_mixin.py:109} INFO - [2022-01-31 00:18:13,358] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:18:13,375] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.424 seconds
[2022-01-31 00:18:45,908] {processor.py:163} INFO - Started process (PID=33806) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:18:45,909] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:18:45,909] {logging_mixin.py:109} INFO - [2022-01-31 00:18:45,909] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:18:46,780] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:18:46,801] {logging_mixin.py:109} INFO - [2022-01-31 00:18:46,800] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:18:46,812] {logging_mixin.py:109} INFO - [2022-01-31 00:18:46,812] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:18:46,819] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.913 seconds
[2022-01-31 00:19:19,319] {processor.py:163} INFO - Started process (PID=33813) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:19:19,320] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:19:19,320] {logging_mixin.py:109} INFO - [2022-01-31 00:19:19,320] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:19:20,146] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:19:20,179] {logging_mixin.py:109} INFO - [2022-01-31 00:19:20,179] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:19:20,190] {logging_mixin.py:109} INFO - [2022-01-31 00:19:20,190] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:19:20,199] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.881 seconds
[2022-01-31 00:19:52,748] {processor.py:163} INFO - Started process (PID=33815) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:19:52,749] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:19:52,750] {logging_mixin.py:109} INFO - [2022-01-31 00:19:52,750] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:19:53,252] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:19:53,268] {logging_mixin.py:109} INFO - [2022-01-31 00:19:53,268] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:19:53,279] {logging_mixin.py:109} INFO - [2022-01-31 00:19:53,279] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:19:53,297] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.549 seconds
[2022-01-31 00:20:25,616] {processor.py:163} INFO - Started process (PID=33820) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:20:25,617] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:20:25,618] {logging_mixin.py:109} INFO - [2022-01-31 00:20:25,617] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:20:26,119] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:20:26,136] {logging_mixin.py:109} INFO - [2022-01-31 00:20:26,135] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:20:26,146] {logging_mixin.py:109} INFO - [2022-01-31 00:20:26,146] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:20:26,154] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.538 seconds
[2022-01-31 00:20:58,503] {processor.py:163} INFO - Started process (PID=33824) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:20:58,504] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:20:58,504] {logging_mixin.py:109} INFO - [2022-01-31 00:20:58,504] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:20:59,087] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:20:59,106] {logging_mixin.py:109} INFO - [2022-01-31 00:20:59,106] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:20:59,119] {logging_mixin.py:109} INFO - [2022-01-31 00:20:59,119] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:20:59,129] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.626 seconds
[2022-01-31 00:21:31,592] {processor.py:163} INFO - Started process (PID=33828) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:21:31,593] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:21:31,594] {logging_mixin.py:109} INFO - [2022-01-31 00:21:31,594] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:21:32,389] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:21:32,410] {logging_mixin.py:109} INFO - [2022-01-31 00:21:32,410] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:21:32,422] {logging_mixin.py:109} INFO - [2022-01-31 00:21:32,422] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:21:32,430] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.838 seconds
[2022-01-31 00:22:04,890] {processor.py:163} INFO - Started process (PID=33829) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:22:04,891] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:22:04,891] {logging_mixin.py:109} INFO - [2022-01-31 00:22:04,891] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:22:05,705] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:22:05,726] {logging_mixin.py:109} INFO - [2022-01-31 00:22:05,726] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:22:05,737] {logging_mixin.py:109} INFO - [2022-01-31 00:22:05,737] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:22:05,746] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.856 seconds
[2022-01-31 00:22:37,481] {processor.py:163} INFO - Started process (PID=33834) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:22:37,482] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:22:37,482] {logging_mixin.py:109} INFO - [2022-01-31 00:22:37,482] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:22:37,853] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:22:37,870] {logging_mixin.py:109} INFO - [2022-01-31 00:22:37,870] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:22:37,881] {logging_mixin.py:109} INFO - [2022-01-31 00:22:37,881] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:22:37,898] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.417 seconds
[2022-01-31 00:23:09,800] {processor.py:163} INFO - Started process (PID=33839) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:23:09,800] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:23:09,801] {logging_mixin.py:109} INFO - [2022-01-31 00:23:09,801] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:23:10,584] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:23:10,604] {logging_mixin.py:109} INFO - [2022-01-31 00:23:10,604] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:23:10,615] {logging_mixin.py:109} INFO - [2022-01-31 00:23:10,615] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:23:10,624] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.825 seconds
[2022-01-31 00:23:43,124] {processor.py:163} INFO - Started process (PID=33843) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:23:43,125] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:23:43,125] {logging_mixin.py:109} INFO - [2022-01-31 00:23:43,125] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:23:43,912] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:23:43,933] {logging_mixin.py:109} INFO - [2022-01-31 00:23:43,933] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:23:43,944] {logging_mixin.py:109} INFO - [2022-01-31 00:23:43,944] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:23:43,951] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.828 seconds
[2022-01-31 00:24:16,407] {processor.py:163} INFO - Started process (PID=33847) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:24:16,408] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:24:16,408] {logging_mixin.py:109} INFO - [2022-01-31 00:24:16,408] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:24:17,205] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:24:17,226] {logging_mixin.py:109} INFO - [2022-01-31 00:24:17,226] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:24:17,237] {logging_mixin.py:109} INFO - [2022-01-31 00:24:17,237] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:24:17,245] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.839 seconds
[2022-01-31 00:24:49,872] {processor.py:163} INFO - Started process (PID=33872) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:24:49,873] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:24:49,873] {logging_mixin.py:109} INFO - [2022-01-31 00:24:49,873] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:24:50,704] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:24:50,725] {logging_mixin.py:109} INFO - [2022-01-31 00:24:50,725] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:24:50,736] {logging_mixin.py:109} INFO - [2022-01-31 00:24:50,736] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:24:50,744] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.873 seconds
[2022-01-31 00:25:23,223] {processor.py:163} INFO - Started process (PID=33875) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:25:23,224] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:25:23,238] {logging_mixin.py:109} INFO - [2022-01-31 00:25:23,238] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:25:24,053] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:25:24,073] {logging_mixin.py:109} INFO - [2022-01-31 00:25:24,072] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:25:24,083] {logging_mixin.py:109} INFO - [2022-01-31 00:25:24,083] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:25:24,091] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.869 seconds
[2022-01-31 00:25:56,545] {processor.py:163} INFO - Started process (PID=33878) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:25:56,545] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:25:56,546] {logging_mixin.py:109} INFO - [2022-01-31 00:25:56,546] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:25:57,352] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:25:57,375] {logging_mixin.py:109} INFO - [2022-01-31 00:25:57,375] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:25:57,389] {logging_mixin.py:109} INFO - [2022-01-31 00:25:57,389] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:25:57,399] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.855 seconds
[2022-01-31 00:26:29,142] {processor.py:163} INFO - Started process (PID=33912) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:26:29,143] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:26:29,143] {logging_mixin.py:109} INFO - [2022-01-31 00:26:29,143] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:26:29,515] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:26:29,533] {logging_mixin.py:109} INFO - [2022-01-31 00:26:29,533] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:26:29,544] {logging_mixin.py:109} INFO - [2022-01-31 00:26:29,544] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:26:29,562] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.420 seconds
[2022-01-31 00:27:01,415] {processor.py:163} INFO - Started process (PID=33914) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:27:01,415] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:27:01,416] {logging_mixin.py:109} INFO - [2022-01-31 00:27:01,416] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:27:01,803] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:27:01,820] {logging_mixin.py:109} INFO - [2022-01-31 00:27:01,820] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:27:01,833] {logging_mixin.py:109} INFO - [2022-01-31 00:27:01,833] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:27:01,851] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.436 seconds
[2022-01-31 00:27:33,582] {processor.py:163} INFO - Started process (PID=33918) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:27:33,583] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:27:33,583] {logging_mixin.py:109} INFO - [2022-01-31 00:27:33,583] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:27:34,387] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:27:34,421] {logging_mixin.py:109} INFO - [2022-01-31 00:27:34,421] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:27:34,432] {logging_mixin.py:109} INFO - [2022-01-31 00:27:34,432] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:27:34,439] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.857 seconds
[2022-01-31 00:28:07,078] {processor.py:163} INFO - Started process (PID=33949) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:28:07,079] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:28:07,080] {logging_mixin.py:109} INFO - [2022-01-31 00:28:07,080] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:28:07,889] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:28:07,909] {logging_mixin.py:109} INFO - [2022-01-31 00:28:07,909] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:28:07,920] {logging_mixin.py:109} INFO - [2022-01-31 00:28:07,920] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:28:07,927] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.850 seconds
[2022-01-31 00:28:39,692] {processor.py:163} INFO - Started process (PID=33952) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:28:39,693] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:28:39,693] {logging_mixin.py:109} INFO - [2022-01-31 00:28:39,693] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:28:40,169] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:28:40,186] {logging_mixin.py:109} INFO - [2022-01-31 00:28:40,186] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:28:40,197] {logging_mixin.py:109} INFO - [2022-01-31 00:28:40,197] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:28:40,211] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.519 seconds
[2022-01-31 00:29:11,966] {processor.py:163} INFO - Started process (PID=33954) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:29:11,966] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:29:11,967] {logging_mixin.py:109} INFO - [2022-01-31 00:29:11,967] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:29:12,490] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:29:12,507] {logging_mixin.py:109} INFO - [2022-01-31 00:29:12,507] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:29:12,518] {logging_mixin.py:109} INFO - [2022-01-31 00:29:12,518] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:29:12,536] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.570 seconds
[2022-01-31 00:29:44,300] {processor.py:163} INFO - Started process (PID=33955) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:29:44,300] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:29:44,301] {logging_mixin.py:109} INFO - [2022-01-31 00:29:44,300] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:29:44,685] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:29:44,703] {logging_mixin.py:109} INFO - [2022-01-31 00:29:44,703] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:29:44,714] {logging_mixin.py:109} INFO - [2022-01-31 00:29:44,714] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:29:44,731] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.432 seconds
[2022-01-31 00:30:16,478] {processor.py:163} INFO - Started process (PID=33959) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:30:16,479] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 00:30:16,479] {logging_mixin.py:109} INFO - [2022-01-31 00:30:16,479] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:30:17,059] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 00:30:17,077] {logging_mixin.py:109} INFO - [2022-01-31 00:30:17,076] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 00:30:17,088] {logging_mixin.py:109} INFO - [2022-01-31 00:30:17,088] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 00:30:17,095] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.618 seconds
[2022-01-31 19:30:31,152] {processor.py:163} INFO - Started process (PID=42364) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:30:31,167] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:30:31,167] {logging_mixin.py:109} INFO - [2022-01-31 19:30:31,167] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:30:32,070] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:30:32,488] {logging_mixin.py:109} INFO - [2022-01-31 19:30:32,488] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:30:32,509] {logging_mixin.py:109} INFO - [2022-01-31 19:30:32,509] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:30:32,519] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.368 seconds
[2022-01-31 19:31:05,985] {processor.py:163} INFO - Started process (PID=42392) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:31:05,987] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:31:05,987] {logging_mixin.py:109} INFO - [2022-01-31 19:31:05,987] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:31:06,540] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:31:06,571] {logging_mixin.py:109} INFO - [2022-01-31 19:31:06,571] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:31:06,586] {logging_mixin.py:109} INFO - [2022-01-31 19:31:06,586] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:31:06,597] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.612 seconds
[2022-01-31 19:31:39,473] {processor.py:163} INFO - Started process (PID=42394) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:31:39,474] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:31:39,476] {logging_mixin.py:109} INFO - [2022-01-31 19:31:39,475] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:31:40,548] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:31:40,583] {logging_mixin.py:109} INFO - [2022-01-31 19:31:40,582] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:31:40,600] {logging_mixin.py:109} INFO - [2022-01-31 19:31:40,599] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:31:40,609] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.137 seconds
[2022-01-31 19:32:12,857] {processor.py:163} INFO - Started process (PID=42409) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:32:12,858] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:32:12,858] {logging_mixin.py:109} INFO - [2022-01-31 19:32:12,858] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:32:13,688] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:32:13,709] {logging_mixin.py:109} INFO - [2022-01-31 19:32:13,708] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:32:13,720] {logging_mixin.py:109} INFO - [2022-01-31 19:32:13,720] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:32:13,728] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.872 seconds
[2022-01-31 19:32:46,849] {processor.py:163} INFO - Started process (PID=42418) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:32:46,850] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:32:46,850] {logging_mixin.py:109} INFO - [2022-01-31 19:32:46,850] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:32:48,428] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:32:48,454] {logging_mixin.py:109} INFO - [2022-01-31 19:32:48,454] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:32:48,472] {logging_mixin.py:109} INFO - [2022-01-31 19:32:48,471] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:32:48,482] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.634 seconds
[2022-01-31 19:33:21,351] {processor.py:163} INFO - Started process (PID=42439) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:33:21,352] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:33:21,354] {logging_mixin.py:109} INFO - [2022-01-31 19:33:21,354] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:33:22,293] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:33:22,314] {logging_mixin.py:109} INFO - [2022-01-31 19:33:22,314] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:33:22,326] {logging_mixin.py:109} INFO - [2022-01-31 19:33:22,326] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:33:22,335] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.985 seconds
[2022-01-31 19:33:54,216] {processor.py:163} INFO - Started process (PID=42444) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:33:54,216] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:33:54,217] {logging_mixin.py:109} INFO - [2022-01-31 19:33:54,217] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:33:55,044] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:33:55,065] {logging_mixin.py:109} INFO - [2022-01-31 19:33:55,064] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:33:55,079] {logging_mixin.py:109} INFO - [2022-01-31 19:33:55,079] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:33:55,087] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.872 seconds
[2022-01-31 19:34:28,102] {processor.py:163} INFO - Started process (PID=42453) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:34:28,102] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:34:28,103] {logging_mixin.py:109} INFO - [2022-01-31 19:34:28,103] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:34:29,074] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:34:29,101] {logging_mixin.py:109} INFO - [2022-01-31 19:34:29,101] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:34:29,118] {logging_mixin.py:109} INFO - [2022-01-31 19:34:29,118] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:34:29,134] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.033 seconds
[2022-01-31 19:35:01,962] {processor.py:163} INFO - Started process (PID=42472) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:35:01,963] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:35:01,963] {logging_mixin.py:109} INFO - [2022-01-31 19:35:01,963] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:35:02,992] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:35:03,025] {logging_mixin.py:109} INFO - [2022-01-31 19:35:03,025] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:35:03,041] {logging_mixin.py:109} INFO - [2022-01-31 19:35:03,041] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:35:03,049] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.088 seconds
[2022-01-31 19:35:35,505] {processor.py:163} INFO - Started process (PID=42517) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:35:35,506] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:35:35,507] {logging_mixin.py:109} INFO - [2022-01-31 19:35:35,507] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:35:36,354] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:35:36,375] {logging_mixin.py:109} INFO - [2022-01-31 19:35:36,375] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:35:36,386] {logging_mixin.py:109} INFO - [2022-01-31 19:35:36,386] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:35:36,394] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.890 seconds
[2022-01-31 19:36:12,637] {processor.py:163} INFO - Started process (PID=42541) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:36:12,638] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:36:12,639] {logging_mixin.py:109} INFO - [2022-01-31 19:36:12,639] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:36:13,510] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:36:13,534] {logging_mixin.py:109} INFO - [2022-01-31 19:36:13,534] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:36:13,547] {logging_mixin.py:109} INFO - [2022-01-31 19:36:13,547] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:36:13,556] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.920 seconds
[2022-01-31 19:36:46,866] {processor.py:163} INFO - Started process (PID=42553) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:36:46,868] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:36:46,868] {logging_mixin.py:109} INFO - [2022-01-31 19:36:46,868] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:36:47,678] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:36:47,698] {logging_mixin.py:109} INFO - [2022-01-31 19:36:47,698] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:36:47,710] {logging_mixin.py:109} INFO - [2022-01-31 19:36:47,710] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:36:47,720] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.854 seconds
[2022-01-31 19:37:20,441] {processor.py:163} INFO - Started process (PID=42563) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:37:20,441] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:37:20,441] {logging_mixin.py:109} INFO - [2022-01-31 19:37:20,441] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:37:21,822] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:37:21,993] {logging_mixin.py:109} INFO - [2022-01-31 19:37:21,993] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:37:22,058] {logging_mixin.py:109} INFO - [2022-01-31 19:37:22,057] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:37:22,072] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.632 seconds
[2022-01-31 19:37:54,463] {processor.py:163} INFO - Started process (PID=42612) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:37:54,464] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:37:54,464] {logging_mixin.py:109} INFO - [2022-01-31 19:37:54,464] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:37:55,237] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:37:55,257] {logging_mixin.py:109} INFO - [2022-01-31 19:37:55,257] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:37:55,268] {logging_mixin.py:109} INFO - [2022-01-31 19:37:55,268] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:37:55,275] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.813 seconds
[2022-01-31 19:38:28,570] {processor.py:163} INFO - Started process (PID=42647) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:38:28,571] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:38:28,571] {logging_mixin.py:109} INFO - [2022-01-31 19:38:28,571] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:38:29,606] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:38:29,635] {logging_mixin.py:109} INFO - [2022-01-31 19:38:29,635] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:38:29,647] {logging_mixin.py:109} INFO - [2022-01-31 19:38:29,647] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:38:29,655] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.086 seconds
[2022-01-31 19:38:34,544] {processor.py:163} INFO - Started process (PID=42655) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:38:34,544] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:38:34,545] {logging_mixin.py:109} INFO - [2022-01-31 19:38:34,545] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:38:35,417] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:38:35,436] {logging_mixin.py:109} INFO - [2022-01-31 19:38:35,436] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:38:35,448] {logging_mixin.py:109} INFO - [2022-01-31 19:38:35,448] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:38:35,457] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.914 seconds
[2022-01-31 19:39:09,308] {processor.py:163} INFO - Started process (PID=42666) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:39:09,309] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:39:09,309] {logging_mixin.py:109} INFO - [2022-01-31 19:39:09,309] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:39:10,493] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:39:10,510] {logging_mixin.py:109} INFO - [2022-01-31 19:39:10,510] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:39:10,522] {logging_mixin.py:109} INFO - [2022-01-31 19:39:10,522] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:39:10,539] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.231 seconds
[2022-01-31 19:39:35,951] {processor.py:163} INFO - Started process (PID=42684) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:39:35,952] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:39:35,952] {logging_mixin.py:109} INFO - [2022-01-31 19:39:35,952] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:39:37,017] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:39:37,065] {logging_mixin.py:109} INFO - [2022-01-31 19:39:37,064] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:39:37,081] {logging_mixin.py:109} INFO - [2022-01-31 19:39:37,081] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:39:37,090] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.140 seconds
[2022-01-31 19:40:10,096] {processor.py:163} INFO - Started process (PID=42730) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:40:10,097] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:40:10,098] {logging_mixin.py:109} INFO - [2022-01-31 19:40:10,098] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:40:11,172] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:40:11,201] {logging_mixin.py:109} INFO - [2022-01-31 19:40:11,201] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:40:11,217] {logging_mixin.py:109} INFO - [2022-01-31 19:40:11,217] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:40:11,229] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.134 seconds
[2022-01-31 19:40:43,859] {processor.py:163} INFO - Started process (PID=42763) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:40:43,860] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:40:43,860] {logging_mixin.py:109} INFO - [2022-01-31 19:40:43,860] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:40:44,335] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:40:44,356] {logging_mixin.py:109} INFO - [2022-01-31 19:40:44,355] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:40:44,369] {logging_mixin.py:109} INFO - [2022-01-31 19:40:44,369] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:40:44,377] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.519 seconds
[2022-01-31 19:41:17,562] {processor.py:163} INFO - Started process (PID=42767) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:41:17,567] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:41:17,568] {logging_mixin.py:109} INFO - [2022-01-31 19:41:17,568] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:41:18,501] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:41:18,521] {logging_mixin.py:109} INFO - [2022-01-31 19:41:18,520] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:41:18,532] {logging_mixin.py:109} INFO - [2022-01-31 19:41:18,531] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:41:18,539] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.977 seconds
[2022-01-31 19:41:51,040] {processor.py:163} INFO - Started process (PID=42804) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:41:51,041] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:41:51,041] {logging_mixin.py:109} INFO - [2022-01-31 19:41:51,041] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:41:51,868] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:41:51,889] {logging_mixin.py:109} INFO - [2022-01-31 19:41:51,889] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:41:51,901] {logging_mixin.py:109} INFO - [2022-01-31 19:41:51,900] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:41:51,908] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.869 seconds
[2022-01-31 19:42:07,707] {processor.py:163} INFO - Started process (PID=42823) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:42:07,708] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:42:07,708] {logging_mixin.py:109} INFO - [2022-01-31 19:42:07,708] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:42:08,888] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:42:08,907] {logging_mixin.py:109} INFO - [2022-01-31 19:42:08,907] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:42:08,920] {logging_mixin.py:109} INFO - [2022-01-31 19:42:08,919] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:42:08,929] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.226 seconds
[2022-01-31 19:42:40,989] {processor.py:163} INFO - Started process (PID=42837) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:42:40,990] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:42:40,991] {logging_mixin.py:109} INFO - [2022-01-31 19:42:40,991] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:42:41,537] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:42:41,560] {logging_mixin.py:109} INFO - [2022-01-31 19:42:41,560] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:42:41,576] {logging_mixin.py:109} INFO - [2022-01-31 19:42:41,576] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:42:41,593] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.605 seconds
[2022-01-31 19:43:14,294] {processor.py:163} INFO - Started process (PID=42839) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:43:14,294] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:43:14,295] {logging_mixin.py:109} INFO - [2022-01-31 19:43:14,295] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:43:15,168] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:43:15,191] {logging_mixin.py:109} INFO - [2022-01-31 19:43:15,190] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:43:15,204] {logging_mixin.py:109} INFO - [2022-01-31 19:43:15,204] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:43:15,214] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.920 seconds
[2022-01-31 19:43:47,685] {processor.py:163} INFO - Started process (PID=42842) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:43:47,686] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:43:47,686] {logging_mixin.py:109} INFO - [2022-01-31 19:43:47,686] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:43:48,509] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:43:48,544] {logging_mixin.py:109} INFO - [2022-01-31 19:43:48,544] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:43:48,556] {logging_mixin.py:109} INFO - [2022-01-31 19:43:48,556] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:43:48,565] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.881 seconds
[2022-01-31 19:44:20,458] {processor.py:163} INFO - Started process (PID=42852) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:44:20,459] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:44:20,459] {logging_mixin.py:109} INFO - [2022-01-31 19:44:20,459] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:44:20,853] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:44:20,871] {logging_mixin.py:109} INFO - [2022-01-31 19:44:20,871] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:44:20,883] {logging_mixin.py:109} INFO - [2022-01-31 19:44:20,883] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:44:20,900] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.442 seconds
[2022-01-31 19:44:52,719] {processor.py:163} INFO - Started process (PID=42858) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:44:52,719] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:44:52,720] {logging_mixin.py:109} INFO - [2022-01-31 19:44:52,720] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:44:53,544] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:44:53,564] {logging_mixin.py:109} INFO - [2022-01-31 19:44:53,564] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:44:53,576] {logging_mixin.py:109} INFO - [2022-01-31 19:44:53,576] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:44:53,584] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.866 seconds
[2022-01-31 19:45:28,296] {processor.py:163} INFO - Started process (PID=42898) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:45:28,297] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:45:28,298] {logging_mixin.py:109} INFO - [2022-01-31 19:45:28,298] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:45:29,129] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:45:29,154] {logging_mixin.py:109} INFO - [2022-01-31 19:45:29,154] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:45:29,167] {logging_mixin.py:109} INFO - [2022-01-31 19:45:29,167] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:45:29,177] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.882 seconds
[2022-01-31 19:46:01,861] {processor.py:163} INFO - Started process (PID=42945) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:46:01,861] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:46:01,861] {logging_mixin.py:109} INFO - [2022-01-31 19:46:01,861] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:46:02,772] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:46:02,801] {logging_mixin.py:109} INFO - [2022-01-31 19:46:02,801] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:46:02,813] {logging_mixin.py:109} INFO - [2022-01-31 19:46:02,813] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:46:02,821] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.961 seconds
[2022-01-31 19:46:35,139] {processor.py:163} INFO - Started process (PID=42985) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:46:35,140] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:46:35,140] {logging_mixin.py:109} INFO - [2022-01-31 19:46:35,140] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:46:35,938] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:46:35,962] {logging_mixin.py:109} INFO - [2022-01-31 19:46:35,961] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:46:35,974] {logging_mixin.py:109} INFO - [2022-01-31 19:46:35,974] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:46:35,982] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.844 seconds
[2022-01-31 19:47:08,237] {processor.py:163} INFO - Started process (PID=43023) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:47:08,237] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:47:08,238] {logging_mixin.py:109} INFO - [2022-01-31 19:47:08,238] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:47:09,038] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:47:09,058] {logging_mixin.py:109} INFO - [2022-01-31 19:47:09,058] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:47:09,069] {logging_mixin.py:109} INFO - [2022-01-31 19:47:09,069] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:47:09,077] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.841 seconds
[2022-01-31 19:47:41,655] {processor.py:163} INFO - Started process (PID=43062) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:47:41,656] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:47:41,657] {logging_mixin.py:109} INFO - [2022-01-31 19:47:41,657] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:47:42,592] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:47:42,613] {logging_mixin.py:109} INFO - [2022-01-31 19:47:42,612] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:47:42,631] {logging_mixin.py:109} INFO - [2022-01-31 19:47:42,631] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:47:42,640] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.985 seconds
[2022-01-31 19:48:14,949] {processor.py:163} INFO - Started process (PID=43119) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:48:14,949] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:48:14,950] {logging_mixin.py:109} INFO - [2022-01-31 19:48:14,950] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:48:15,733] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:48:15,764] {logging_mixin.py:109} INFO - [2022-01-31 19:48:15,764] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:48:15,776] {logging_mixin.py:109} INFO - [2022-01-31 19:48:15,776] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:48:15,784] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.836 seconds
[2022-01-31 19:48:49,537] {processor.py:163} INFO - Started process (PID=43218) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:48:49,537] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:48:49,538] {logging_mixin.py:109} INFO - [2022-01-31 19:48:49,538] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:48:50,478] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:48:50,565] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:48:50,567] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:48:50,577] {logging_mixin.py:109} INFO - [2022-01-31 19:48:50,577] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:48:50,600] {logging_mixin.py:109} INFO - [2022-01-31 19:48:50,599] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:48:50,609] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.073 seconds
[2022-01-31 19:49:22,418] {processor.py:163} INFO - Started process (PID=43261) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:49:22,418] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:49:22,418] {logging_mixin.py:109} INFO - [2022-01-31 19:49:22,418] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:49:22,805] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:49:22,858] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:49:22,860] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:49:22,867] {logging_mixin.py:109} INFO - [2022-01-31 19:49:22,867] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:49:22,883] {logging_mixin.py:109} INFO - [2022-01-31 19:49:22,883] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:49:22,903] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.486 seconds
[2022-01-31 19:49:32,300] {processor.py:163} INFO - Started process (PID=43274) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:49:32,300] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:49:32,301] {logging_mixin.py:109} INFO - [2022-01-31 19:49:32,301] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:49:33,156] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:49:33,244] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:49:33,246] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:49:33,253] {logging_mixin.py:109} INFO - [2022-01-31 19:49:33,253] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:49:33,269] {logging_mixin.py:109} INFO - [2022-01-31 19:49:33,269] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:49:33,279] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.980 seconds
[2022-01-31 19:50:06,881] {processor.py:163} INFO - Started process (PID=43280) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:50:06,882] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:50:06,883] {logging_mixin.py:109} INFO - [2022-01-31 19:50:06,883] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:50:07,875] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:50:08,018] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:50:08,023] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:50:08,041] {logging_mixin.py:109} INFO - [2022-01-31 19:50:08,041] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:50:08,069] {logging_mixin.py:109} INFO - [2022-01-31 19:50:08,069] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:50:08,105] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.230 seconds
[2022-01-31 19:50:42,589] {processor.py:163} INFO - Started process (PID=43297) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:50:42,590] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:50:42,590] {logging_mixin.py:109} INFO - [2022-01-31 19:50:42,590] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:50:43,736] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:50:44,001] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:50:44,007] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:50:44,016] {logging_mixin.py:109} INFO - [2022-01-31 19:50:44,016] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:50:44,038] {logging_mixin.py:109} INFO - [2022-01-31 19:50:44,038] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:50:44,052] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.465 seconds
[2022-01-31 19:50:58,310] {processor.py:163} INFO - Started process (PID=43322) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:50:58,310] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:50:58,311] {logging_mixin.py:109} INFO - [2022-01-31 19:50:58,311] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:50:59,044] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:50:59,167] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:50:59,171] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:50:59,178] {logging_mixin.py:109} INFO - [2022-01-31 19:50:59,178] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:50:59,204] {logging_mixin.py:109} INFO - [2022-01-31 19:50:59,204] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:50:59,225] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.916 seconds
[2022-01-31 19:51:31,306] {processor.py:163} INFO - Started process (PID=43338) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:51:31,307] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:51:31,308] {logging_mixin.py:109} INFO - [2022-01-31 19:51:31,308] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:51:31,806] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:51:31,859] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:51:31,861] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:51:31,869] {logging_mixin.py:109} INFO - [2022-01-31 19:51:31,869] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:51:31,885] {logging_mixin.py:109} INFO - [2022-01-31 19:51:31,885] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:51:31,904] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.599 seconds
[2022-01-31 19:52:04,509] {processor.py:163} INFO - Started process (PID=43353) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:52:04,510] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:52:04,511] {logging_mixin.py:109} INFO - [2022-01-31 19:52:04,511] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:52:04,971] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:52:05,109] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:52:05,114] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:52:05,123] {logging_mixin.py:109} INFO - [2022-01-31 19:52:05,123] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:52:05,144] {logging_mixin.py:109} INFO - [2022-01-31 19:52:05,144] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:52:05,158] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.650 seconds
[2022-01-31 19:52:39,378] {processor.py:163} INFO - Started process (PID=43367) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:52:39,379] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:52:39,379] {logging_mixin.py:109} INFO - [2022-01-31 19:52:39,379] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:52:40,347] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:52:40,433] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:52:40,435] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:52:40,444] {logging_mixin.py:109} INFO - [2022-01-31 19:52:40,443] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:52:40,459] {logging_mixin.py:109} INFO - [2022-01-31 19:52:40,459] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:52:40,469] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.092 seconds
[2022-01-31 19:53:13,543] {processor.py:163} INFO - Started process (PID=43432) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:53:13,543] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:53:13,544] {logging_mixin.py:109} INFO - [2022-01-31 19:53:13,544] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:53:14,569] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:53:14,746] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:53:14,748] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:53:14,756] {logging_mixin.py:109} INFO - [2022-01-31 19:53:14,756] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:53:14,775] {logging_mixin.py:109} INFO - [2022-01-31 19:53:14,774] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:53:14,787] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.246 seconds
[2022-01-31 19:53:46,961] {processor.py:163} INFO - Started process (PID=43483) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:53:46,961] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:53:46,961] {logging_mixin.py:109} INFO - [2022-01-31 19:53:46,961] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:53:47,504] {processor.py:654} INFO - DAG(s) dict_keys(['asdag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:53:47,568] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:53:47,570] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:53:47,577] {logging_mixin.py:109} INFO - [2022-01-31 19:53:47,577] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:53:47,593] {logging_mixin.py:109} INFO - [2022-01-31 19:53:47,593] {dag.py:2935} INFO - Setting next_dagrun for asdag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:53:47,603] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.643 seconds
[2022-01-31 19:54:19,027] {processor.py:163} INFO - Started process (PID=43522) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:54:19,028] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:54:19,028] {logging_mixin.py:109} INFO - [2022-01-31 19:54:19,028] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:54:19,758] {processor.py:690} INFO - Deactivated 1 DAGs which are no longer present in /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:54:19,758] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:54:19,922] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:54:19,927] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:54:20,824] {logging_mixin.py:109} INFO - [2022-01-31 19:54:20,824] {manager.py:496} INFO - Created Permission View: can edit on DAG:Spotify_Song_dag
[2022-01-31 19:54:20,832] {logging_mixin.py:109} INFO - [2022-01-31 19:54:20,832] {manager.py:496} INFO - Created Permission View: can read on DAG:Spotify_Song_dag
[2022-01-31 19:54:20,833] {logging_mixin.py:109} INFO - [2022-01-31 19:54:20,833] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:54:20,843] {logging_mixin.py:109} INFO - [2022-01-31 19:54:20,843] {dag.py:2415} INFO - Creating ORM DAG for Spotify_Song_dag
[2022-01-31 19:54:20,854] {logging_mixin.py:109} INFO - [2022-01-31 19:54:20,854] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:54:20,872] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.845 seconds
[2022-01-31 19:54:55,029] {processor.py:163} INFO - Started process (PID=43567) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:54:55,038] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:54:55,045] {logging_mixin.py:109} INFO - [2022-01-31 19:54:55,045] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:54:56,488] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:54:56,791] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:54:56,801] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:54:56,816] {logging_mixin.py:109} INFO - [2022-01-31 19:54:56,816] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:54:56,837] {logging_mixin.py:109} INFO - [2022-01-31 19:54:56,837] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:54:56,857] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.829 seconds
[2022-01-31 19:55:28,732] {processor.py:163} INFO - Started process (PID=43572) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:55:28,733] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:55:28,733] {logging_mixin.py:109} INFO - [2022-01-31 19:55:28,733] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:55:29,567] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:55:29,651] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:55:29,653] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:55:29,660] {logging_mixin.py:109} INFO - [2022-01-31 19:55:29,660] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:55:29,675] {logging_mixin.py:109} INFO - [2022-01-31 19:55:29,675] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:55:29,685] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.954 seconds
[2022-01-31 19:56:04,406] {processor.py:163} INFO - Started process (PID=43573) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:56:04,406] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:56:04,407] {logging_mixin.py:109} INFO - [2022-01-31 19:56:04,407] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:56:06,697] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:56:07,067] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:56:07,075] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:56:07,093] {logging_mixin.py:109} INFO - [2022-01-31 19:56:07,093] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:56:07,151] {logging_mixin.py:109} INFO - [2022-01-31 19:56:07,151] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:56:07,174] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 2.769 seconds
[2022-01-31 19:56:39,567] {processor.py:163} INFO - Started process (PID=43590) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:56:39,568] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:56:39,569] {logging_mixin.py:109} INFO - [2022-01-31 19:56:39,569] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:56:41,240] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:56:41,381] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:56:41,385] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:56:41,405] {logging_mixin.py:109} INFO - [2022-01-31 19:56:41,402] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:56:41,455] {logging_mixin.py:109} INFO - [2022-01-31 19:56:41,455] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:56:41,498] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.931 seconds
[2022-01-31 19:57:14,210] {processor.py:163} INFO - Started process (PID=43598) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:57:14,211] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:57:14,211] {logging_mixin.py:109} INFO - [2022-01-31 19:57:14,211] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:57:14,838] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:57:14,900] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:57:14,903] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:57:14,911] {logging_mixin.py:109} INFO - [2022-01-31 19:57:14,911] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:57:14,932] {logging_mixin.py:109} INFO - [2022-01-31 19:57:14,932] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:57:14,948] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.738 seconds
[2022-01-31 19:57:47,325] {processor.py:163} INFO - Started process (PID=43608) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:57:47,325] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:57:47,326] {logging_mixin.py:109} INFO - [2022-01-31 19:57:47,326] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:57:48,041] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:57:48,118] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:57:48,120] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:57:48,130] {logging_mixin.py:109} INFO - [2022-01-31 19:57:48,129] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:57:48,157] {logging_mixin.py:109} INFO - [2022-01-31 19:57:48,157] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:57:48,177] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.852 seconds
[2022-01-31 19:58:20,416] {processor.py:163} INFO - Started process (PID=43615) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:58:20,416] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:58:20,417] {logging_mixin.py:109} INFO - [2022-01-31 19:58:20,417] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:58:21,311] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:58:21,396] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:58:21,399] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:58:21,415] {logging_mixin.py:109} INFO - [2022-01-31 19:58:21,409] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:58:21,442] {logging_mixin.py:109} INFO - [2022-01-31 19:58:21,442] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:58:21,451] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.036 seconds
[2022-01-31 19:58:53,681] {processor.py:163} INFO - Started process (PID=43656) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:58:53,681] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:58:53,681] {logging_mixin.py:109} INFO - [2022-01-31 19:58:53,681] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:58:54,587] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:58:54,678] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:58:54,681] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:58:54,689] {logging_mixin.py:109} INFO - [2022-01-31 19:58:54,689] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:58:54,708] {logging_mixin.py:109} INFO - [2022-01-31 19:58:54,708] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:58:54,722] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.042 seconds
[2022-01-31 19:59:26,752] {processor.py:163} INFO - Started process (PID=43694) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:59:26,752] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:59:26,752] {logging_mixin.py:109} INFO - [2022-01-31 19:59:26,752] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:59:27,575] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:59:27,667] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:59:27,669] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:59:27,676] {logging_mixin.py:109} INFO - [2022-01-31 19:59:27,676] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:59:27,691] {logging_mixin.py:109} INFO - [2022-01-31 19:59:27,690] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:59:27,700] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.949 seconds
[2022-01-31 19:59:55,392] {processor.py:163} INFO - Started process (PID=43731) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:59:55,393] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 19:59:55,394] {logging_mixin.py:109} INFO - [2022-01-31 19:59:55,394] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:59:57,550] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 19:59:57,739] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:59:57,751] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 19:59:57,772] {logging_mixin.py:109} INFO - [2022-01-31 19:59:57,772] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 19:59:57,817] {logging_mixin.py:109} INFO - [2022-01-31 19:59:57,817] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 19:59:57,867] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 2.476 seconds
[2022-01-31 20:00:30,910] {processor.py:163} INFO - Started process (PID=43747) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:00:30,911] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:00:30,911] {logging_mixin.py:109} INFO - [2022-01-31 20:00:30,911] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:00:31,591] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:00:31,647] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:00:31,649] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:00:31,656] {logging_mixin.py:109} INFO - [2022-01-31 20:00:31,656] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:00:31,672] {logging_mixin.py:109} INFO - [2022-01-31 20:00:31,671] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:00:31,691] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.782 seconds
[2022-01-31 20:01:04,071] {processor.py:163} INFO - Started process (PID=43792) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:01:04,071] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:01:04,071] {logging_mixin.py:109} INFO - [2022-01-31 20:01:04,071] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:01:04,887] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:01:04,971] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:01:04,973] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:01:04,980] {logging_mixin.py:109} INFO - [2022-01-31 20:01:04,980] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:01:04,995] {logging_mixin.py:109} INFO - [2022-01-31 20:01:04,995] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:01:05,006] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.936 seconds
[2022-01-31 20:01:37,273] {processor.py:163} INFO - Started process (PID=43834) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:01:37,274] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:01:37,274] {logging_mixin.py:109} INFO - [2022-01-31 20:01:37,274] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:01:38,317] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:01:38,414] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:01:38,417] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:01:38,425] {logging_mixin.py:109} INFO - [2022-01-31 20:01:38,425] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:01:38,443] {logging_mixin.py:109} INFO - [2022-01-31 20:01:38,443] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:01:38,455] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.183 seconds
[2022-01-31 20:02:10,337] {processor.py:163} INFO - Started process (PID=43877) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:02:10,338] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:02:10,338] {logging_mixin.py:109} INFO - [2022-01-31 20:02:10,338] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:02:10,802] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:02:10,861] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:02:10,863] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:02:10,872] {logging_mixin.py:109} INFO - [2022-01-31 20:02:10,872] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:02:10,894] {logging_mixin.py:109} INFO - [2022-01-31 20:02:10,894] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:02:10,918] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.581 seconds
[2022-01-31 20:02:43,425] {processor.py:163} INFO - Started process (PID=43915) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:02:43,425] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:02:43,426] {logging_mixin.py:109} INFO - [2022-01-31 20:02:43,426] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:02:44,001] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:02:44,077] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:02:44,080] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:02:44,090] {logging_mixin.py:109} INFO - [2022-01-31 20:02:44,090] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:02:44,112] {logging_mixin.py:109} INFO - [2022-01-31 20:02:44,112] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:02:44,139] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.715 seconds
[2022-01-31 20:03:16,281] {processor.py:163} INFO - Started process (PID=43959) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:03:16,281] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:03:16,282] {logging_mixin.py:109} INFO - [2022-01-31 20:03:16,282] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:03:17,126] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:03:17,209] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:03:17,212] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:03:17,219] {logging_mixin.py:109} INFO - [2022-01-31 20:03:17,219] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:03:17,234] {logging_mixin.py:109} INFO - [2022-01-31 20:03:17,234] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:03:17,244] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.964 seconds
[2022-01-31 20:03:49,547] {processor.py:163} INFO - Started process (PID=43998) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:03:49,547] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:03:49,547] {logging_mixin.py:109} INFO - [2022-01-31 20:03:49,547] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:03:50,379] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:03:50,468] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:03:50,471] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:03:50,477] {logging_mixin.py:109} INFO - [2022-01-31 20:03:50,477] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:03:50,493] {logging_mixin.py:109} INFO - [2022-01-31 20:03:50,493] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:03:50,504] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.958 seconds
[2022-01-31 20:04:23,628] {processor.py:163} INFO - Started process (PID=44036) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:04:23,629] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:04:23,629] {logging_mixin.py:109} INFO - [2022-01-31 20:04:23,629] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:04:24,621] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:04:24,730] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:04:24,732] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:04:24,739] {logging_mixin.py:109} INFO - [2022-01-31 20:04:24,739] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:04:24,756] {logging_mixin.py:109} INFO - [2022-01-31 20:04:24,755] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:04:24,766] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.139 seconds
[2022-01-31 20:04:56,641] {processor.py:163} INFO - Started process (PID=44081) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:04:56,641] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:04:56,642] {logging_mixin.py:109} INFO - [2022-01-31 20:04:56,642] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:04:57,035] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:04:57,087] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:04:57,090] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:04:57,096] {logging_mixin.py:109} INFO - [2022-01-31 20:04:57,096] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:04:57,112] {logging_mixin.py:109} INFO - [2022-01-31 20:04:57,112] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:04:57,131] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.490 seconds
[2022-01-31 20:05:28,997] {processor.py:163} INFO - Started process (PID=44119) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:05:28,997] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:05:28,998] {logging_mixin.py:109} INFO - [2022-01-31 20:05:28,998] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:05:29,435] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:05:29,490] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:05:29,492] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:05:29,499] {logging_mixin.py:109} INFO - [2022-01-31 20:05:29,499] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:05:29,515] {logging_mixin.py:109} INFO - [2022-01-31 20:05:29,515] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:05:29,536] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.540 seconds
[2022-01-31 20:06:03,024] {processor.py:163} INFO - Started process (PID=44157) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:06:03,025] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:06:03,025] {logging_mixin.py:109} INFO - [2022-01-31 20:06:03,025] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:06:04,033] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:06:04,127] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:06:04,130] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:06:04,138] {logging_mixin.py:109} INFO - [2022-01-31 20:06:04,137] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:06:04,153] {logging_mixin.py:109} INFO - [2022-01-31 20:06:04,153] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:06:04,166] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.142 seconds
[2022-01-31 20:06:36,702] {processor.py:163} INFO - Started process (PID=44205) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:06:36,703] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:06:36,703] {logging_mixin.py:109} INFO - [2022-01-31 20:06:36,703] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:06:37,524] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:06:37,611] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:06:37,613] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:06:37,620] {logging_mixin.py:109} INFO - [2022-01-31 20:06:37,620] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:06:37,636] {logging_mixin.py:109} INFO - [2022-01-31 20:06:37,636] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:06:37,648] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.946 seconds
[2022-01-31 20:07:09,982] {processor.py:163} INFO - Started process (PID=44243) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:07:09,982] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:07:09,983] {logging_mixin.py:109} INFO - [2022-01-31 20:07:09,983] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:07:10,639] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:07:10,694] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:07:10,696] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:07:10,703] {logging_mixin.py:109} INFO - [2022-01-31 20:07:10,703] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:07:10,719] {logging_mixin.py:109} INFO - [2022-01-31 20:07:10,719] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:07:10,740] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.760 seconds
[2022-01-31 20:07:42,811] {processor.py:163} INFO - Started process (PID=44277) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:07:42,811] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:07:42,812] {logging_mixin.py:109} INFO - [2022-01-31 20:07:42,812] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:07:43,666] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:07:43,753] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:07:43,756] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:07:43,763] {logging_mixin.py:109} INFO - [2022-01-31 20:07:43,762] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:07:43,778] {logging_mixin.py:109} INFO - [2022-01-31 20:07:43,778] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:07:43,789] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.978 seconds
[2022-01-31 20:08:16,062] {processor.py:163} INFO - Started process (PID=44312) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:08:16,063] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:08:16,063] {logging_mixin.py:109} INFO - [2022-01-31 20:08:16,063] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:08:16,910] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:08:17,016] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:08:17,018] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:08:17,025] {logging_mixin.py:109} INFO - [2022-01-31 20:08:17,025] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:08:17,040] {logging_mixin.py:109} INFO - [2022-01-31 20:08:17,040] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:08:17,050] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.989 seconds
[2022-01-31 20:08:48,918] {processor.py:163} INFO - Started process (PID=44350) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:08:48,918] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:08:48,918] {logging_mixin.py:109} INFO - [2022-01-31 20:08:48,918] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:08:49,385] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:08:49,437] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:08:49,439] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:08:49,446] {logging_mixin.py:109} INFO - [2022-01-31 20:08:49,446] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:08:49,460] {logging_mixin.py:109} INFO - [2022-01-31 20:08:49,460] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:08:49,480] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.564 seconds
[2022-01-31 20:09:21,624] {processor.py:163} INFO - Started process (PID=44388) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:09:21,625] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:09:21,625] {logging_mixin.py:109} INFO - [2022-01-31 20:09:21,625] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:09:22,517] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:09:22,595] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:09:22,598] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:09:22,604] {logging_mixin.py:109} INFO - [2022-01-31 20:09:22,604] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:09:22,620] {logging_mixin.py:109} INFO - [2022-01-31 20:09:22,619] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:09:22,629] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.006 seconds
[2022-01-31 20:09:55,544] {processor.py:163} INFO - Started process (PID=44462) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:09:55,545] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:09:55,545] {logging_mixin.py:109} INFO - [2022-01-31 20:09:55,545] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:09:56,450] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:09:56,539] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:09:56,541] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:09:56,549] {logging_mixin.py:109} INFO - [2022-01-31 20:09:56,549] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:09:56,564] {logging_mixin.py:109} INFO - [2022-01-31 20:09:56,564] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:09:56,573] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.030 seconds
[2022-01-31 20:10:28,989] {processor.py:163} INFO - Started process (PID=44509) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:10:28,989] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:10:28,989] {logging_mixin.py:109} INFO - [2022-01-31 20:10:28,989] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:10:29,386] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:10:29,440] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:10:29,442] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:10:29,449] {logging_mixin.py:109} INFO - [2022-01-31 20:10:29,449] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:10:29,464] {logging_mixin.py:109} INFO - [2022-01-31 20:10:29,464] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:10:29,484] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.495 seconds
[2022-01-31 20:11:01,455] {processor.py:163} INFO - Started process (PID=44546) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:11:01,455] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:11:01,456] {logging_mixin.py:109} INFO - [2022-01-31 20:11:01,456] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:11:02,074] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:11:02,162] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:11:02,164] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:11:02,171] {logging_mixin.py:109} INFO - [2022-01-31 20:11:02,171] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:11:02,186] {logging_mixin.py:109} INFO - [2022-01-31 20:11:02,186] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:11:02,196] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.741 seconds
[2022-01-31 20:11:34,023] {processor.py:163} INFO - Started process (PID=44587) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:11:34,023] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:11:34,023] {logging_mixin.py:109} INFO - [2022-01-31 20:11:34,023] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:11:34,694] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:11:34,781] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:11:34,784] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:11:34,791] {logging_mixin.py:109} INFO - [2022-01-31 20:11:34,791] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:11:34,808] {logging_mixin.py:109} INFO - [2022-01-31 20:11:34,807] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T00:00:00+00:00
[2022-01-31 20:11:34,818] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.796 seconds
[2022-01-31 20:12:06,592] {processor.py:163} INFO - Started process (PID=44625) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:12:06,592] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:12:06,593] {logging_mixin.py:109} INFO - [2022-01-31 20:12:06,593] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:12:06,604] {logging_mixin.py:109} INFO - [2022-01-31 20:12:06,594] {dagbag.py:334} ERROR - Failed to import: /Users/user/Youtubed/dags/sdag.py
Traceback (most recent call last):
  File "/Users/user/Youtubed/YTVM/lib/python3.9/site-packages/airflow/models/dagbag.py", line 331, in _load_modules_from_file
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 786, in exec_module
  File "<frozen importlib._bootstrap_external>", line 923, in get_code
  File "<frozen importlib._bootstrap_external>", line 853, in source_to_code
  File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
  File "/Users/user/Youtubed/dags/sdag.py", line 91
    song_df.to_sql("my_played_tracks", engine, index=False, if_exists='append', method=)
                                                                                ^
SyntaxError: expression cannot contain assignment, perhaps you meant "=="?
[2022-01-31 20:12:06,637] {processor.py:690} INFO - Deactivated 1 DAGs which are no longer present in /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:12:06,638] {processor.py:656} WARNING - No viable dags retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:12:06,645] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.054 seconds
[2022-01-31 20:12:38,712] {processor.py:163} INFO - Started process (PID=44666) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:12:38,712] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:12:38,712] {logging_mixin.py:109} INFO - [2022-01-31 20:12:38,712] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:12:38,716] {logging_mixin.py:109} INFO - [2022-01-31 20:12:38,715] {dagbag.py:334} ERROR - Failed to import: /Users/user/Youtubed/dags/sdag.py
Traceback (most recent call last):
  File "/Users/user/Youtubed/YTVM/lib/python3.9/site-packages/airflow/models/dagbag.py", line 331, in _load_modules_from_file
    loader.exec_module(new_module)
  File "<frozen importlib._bootstrap_external>", line 786, in exec_module
  File "<frozen importlib._bootstrap_external>", line 923, in get_code
  File "<frozen importlib._bootstrap_external>", line 853, in source_to_code
  File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
  File "/Users/user/Youtubed/dags/sdag.py", line 91
    song_df.to_sql("my_played_tracks", engine, index=False, if_exists='append', method=)
                                                                                ^
SyntaxError: expression cannot contain assignment, perhaps you meant "=="?
[2022-01-31 20:12:38,759] {processor.py:656} WARNING - No viable dags retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:12:38,775] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.065 seconds
[2022-01-31 20:13:05,124] {processor.py:163} INFO - Started process (PID=44701) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:13:05,124] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:13:05,125] {logging_mixin.py:109} INFO - [2022-01-31 20:13:05,125] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:13:06,337] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:13:06,439] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:13:06,442] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:13:06,938] {logging_mixin.py:109} INFO - [2022-01-31 20:13:06,938] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:13:06,955] {logging_mixin.py:109} INFO - [2022-01-31 20:13:06,955] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:10:06.955576+00:00
[2022-01-31 20:13:06,969] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.847 seconds
[2022-01-31 20:13:39,159] {processor.py:163} INFO - Started process (PID=44750) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:13:39,160] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:13:39,160] {logging_mixin.py:109} INFO - [2022-01-31 20:13:39,160] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:13:39,950] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:13:40,033] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:13:40,036] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:13:40,042] {logging_mixin.py:109} INFO - [2022-01-31 20:13:40,042] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:13:40,057] {logging_mixin.py:109} INFO - [2022-01-31 20:13:40,057] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:13:06.955576+00:00
[2022-01-31 20:13:40,068] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.910 seconds
[2022-01-31 20:14:12,489] {processor.py:163} INFO - Started process (PID=44793) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:14:12,490] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:14:12,492] {logging_mixin.py:109} INFO - [2022-01-31 20:14:12,492] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:14:13,278] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:14:13,369] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:14:13,371] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:14:13,379] {logging_mixin.py:109} INFO - [2022-01-31 20:14:13,379] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:14:13,394] {logging_mixin.py:109} INFO - [2022-01-31 20:14:13,394] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:13:06.955576+00:00
[2022-01-31 20:14:13,405] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.916 seconds
[2022-01-31 20:14:46,015] {processor.py:163} INFO - Started process (PID=44817) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:14:46,016] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:14:46,016] {logging_mixin.py:109} INFO - [2022-01-31 20:14:46,016] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:14:46,867] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:14:46,954] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:14:46,956] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:14:46,963] {logging_mixin.py:109} INFO - [2022-01-31 20:14:46,962] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:14:46,980] {logging_mixin.py:109} INFO - [2022-01-31 20:14:46,980] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:13:06.955576+00:00
[2022-01-31 20:14:46,992] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.977 seconds
[2022-01-31 20:15:19,261] {processor.py:163} INFO - Started process (PID=44838) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:15:19,261] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:15:19,261] {logging_mixin.py:109} INFO - [2022-01-31 20:15:19,261] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:15:19,686] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:15:19,739] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:15:19,741] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:15:19,748] {logging_mixin.py:109} INFO - [2022-01-31 20:15:19,748] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:15:19,763] {logging_mixin.py:109} INFO - [2022-01-31 20:15:19,763] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:13:06.955576+00:00
[2022-01-31 20:15:19,782] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.522 seconds
[2022-01-31 20:15:51,648] {processor.py:163} INFO - Started process (PID=44876) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:15:51,648] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:15:51,648] {logging_mixin.py:109} INFO - [2022-01-31 20:15:51,648] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:15:52,398] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:15:52,483] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:15:52,485] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:15:52,492] {logging_mixin.py:109} INFO - [2022-01-31 20:15:52,491] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:15:52,507] {logging_mixin.py:109} INFO - [2022-01-31 20:15:52,507] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:13:06.955576+00:00
[2022-01-31 20:15:52,517] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.870 seconds
[2022-01-31 20:16:25,038] {processor.py:163} INFO - Started process (PID=44921) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:16:25,038] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:16:25,038] {logging_mixin.py:109} INFO - [2022-01-31 20:16:25,038] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:16:25,477] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:16:25,530] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:16:25,533] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:16:25,540] {logging_mixin.py:109} INFO - [2022-01-31 20:16:25,539] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:16:25,555] {logging_mixin.py:109} INFO - [2022-01-31 20:16:25,554] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:16:06.955576+00:00
[2022-01-31 20:16:25,573] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.536 seconds
[2022-01-31 20:16:57,891] {processor.py:163} INFO - Started process (PID=44966) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:16:57,891] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:16:57,892] {logging_mixin.py:109} INFO - [2022-01-31 20:16:57,892] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:16:58,587] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:16:58,676] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:16:58,679] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:16:58,686] {logging_mixin.py:109} INFO - [2022-01-31 20:16:58,685] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:16:58,701] {logging_mixin.py:109} INFO - [2022-01-31 20:16:58,701] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:16:06.955576+00:00
[2022-01-31 20:16:58,711] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.820 seconds
[2022-01-31 20:17:30,605] {processor.py:163} INFO - Started process (PID=45006) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:17:30,605] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:17:30,605] {logging_mixin.py:109} INFO - [2022-01-31 20:17:30,605] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:17:31,394] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:17:31,480] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:17:31,483] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:17:31,490] {logging_mixin.py:109} INFO - [2022-01-31 20:17:31,490] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:17:31,505] {logging_mixin.py:109} INFO - [2022-01-31 20:17:31,505] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:16:06.955576+00:00
[2022-01-31 20:17:31,515] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.910 seconds
[2022-01-31 20:18:03,434] {processor.py:163} INFO - Started process (PID=45044) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:18:03,434] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:18:03,435] {logging_mixin.py:109} INFO - [2022-01-31 20:18:03,434] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:18:04,238] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:18:04,321] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:18:04,324] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:18:04,331] {logging_mixin.py:109} INFO - [2022-01-31 20:18:04,330] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:18:04,346] {logging_mixin.py:109} INFO - [2022-01-31 20:18:04,346] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:16:06.955576+00:00
[2022-01-31 20:18:04,355] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.922 seconds
[2022-01-31 20:18:36,241] {processor.py:163} INFO - Started process (PID=45083) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:18:36,241] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:18:36,242] {logging_mixin.py:109} INFO - [2022-01-31 20:18:36,242] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:18:36,646] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:18:36,705] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:18:36,708] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:18:36,714] {logging_mixin.py:109} INFO - [2022-01-31 20:18:36,714] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:18:36,730] {logging_mixin.py:109} INFO - [2022-01-31 20:18:36,730] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:16:06.955576+00:00
[2022-01-31 20:18:36,750] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.509 seconds
[2022-01-31 20:19:08,693] {processor.py:163} INFO - Started process (PID=45120) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:19:08,693] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:19:08,694] {logging_mixin.py:109} INFO - [2022-01-31 20:19:08,694] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:19:09,098] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:19:09,160] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:19:09,162] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:19:09,170] {logging_mixin.py:109} INFO - [2022-01-31 20:19:09,169] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:19:09,186] {logging_mixin.py:109} INFO - [2022-01-31 20:19:09,186] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:16:09.186372+00:00
[2022-01-31 20:19:09,206] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.514 seconds
[2022-01-31 20:19:41,079] {processor.py:163} INFO - Started process (PID=45161) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:19:41,079] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:19:41,080] {logging_mixin.py:109} INFO - [2022-01-31 20:19:41,080] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:19:41,500] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:19:41,554] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:19:41,556] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:19:41,563] {logging_mixin.py:109} INFO - [2022-01-31 20:19:41,563] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:19:41,579] {logging_mixin.py:109} INFO - [2022-01-31 20:19:41,579] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:19:09.186372+00:00
[2022-01-31 20:19:41,600] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.522 seconds
[2022-01-31 20:20:13,428] {processor.py:163} INFO - Started process (PID=45190) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:20:13,428] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:20:13,428] {logging_mixin.py:109} INFO - [2022-01-31 20:20:13,428] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:20:13,841] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:20:13,894] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:20:13,896] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:20:13,903] {logging_mixin.py:109} INFO - [2022-01-31 20:20:13,903] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:20:13,918] {logging_mixin.py:109} INFO - [2022-01-31 20:20:13,918] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:19:09.186372+00:00
[2022-01-31 20:20:13,938] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.511 seconds
[2022-01-31 20:20:45,848] {processor.py:163} INFO - Started process (PID=45193) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:20:45,848] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:20:45,849] {logging_mixin.py:109} INFO - [2022-01-31 20:20:45,849] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:20:46,252] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:20:46,306] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:20:46,309] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:20:46,315] {logging_mixin.py:109} INFO - [2022-01-31 20:20:46,315] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:20:46,330] {logging_mixin.py:109} INFO - [2022-01-31 20:20:46,330] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:19:09.186372+00:00
[2022-01-31 20:20:46,350] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.503 seconds
[2022-01-31 20:21:18,163] {processor.py:163} INFO - Started process (PID=45194) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:21:18,163] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:21:18,163] {logging_mixin.py:109} INFO - [2022-01-31 20:21:18,163] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:21:18,771] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:21:18,826] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:21:18,828] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:21:18,835] {logging_mixin.py:109} INFO - [2022-01-31 20:21:18,835] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:21:18,851] {logging_mixin.py:109} INFO - [2022-01-31 20:21:18,850] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:19:09.186372+00:00
[2022-01-31 20:21:18,861] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.699 seconds
[2022-01-31 20:21:50,757] {processor.py:163} INFO - Started process (PID=45197) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:21:50,757] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:21:50,758] {logging_mixin.py:109} INFO - [2022-01-31 20:21:50,758] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:21:51,170] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:21:51,224] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:21:51,226] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:21:51,233] {logging_mixin.py:109} INFO - [2022-01-31 20:21:51,233] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:21:51,249] {logging_mixin.py:109} INFO - [2022-01-31 20:21:51,249] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:19:09.186372+00:00
[2022-01-31 20:21:51,269] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.513 seconds
[2022-01-31 20:22:23,181] {processor.py:163} INFO - Started process (PID=45206) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:22:23,181] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:22:23,182] {logging_mixin.py:109} INFO - [2022-01-31 20:22:23,182] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:22:23,576] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:22:23,629] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:22:23,631] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:22:23,638] {logging_mixin.py:109} INFO - [2022-01-31 20:22:23,637] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:22:23,652] {logging_mixin.py:109} INFO - [2022-01-31 20:22:23,652] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:22:09.186372+00:00
[2022-01-31 20:22:23,672] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.492 seconds
[2022-01-31 20:22:55,487] {processor.py:163} INFO - Started process (PID=45210) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:22:55,487] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:22:55,487] {logging_mixin.py:109} INFO - [2022-01-31 20:22:55,487] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:22:56,091] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:22:56,147] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:22:56,149] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:22:56,156] {logging_mixin.py:109} INFO - [2022-01-31 20:22:56,156] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:22:56,171] {logging_mixin.py:109} INFO - [2022-01-31 20:22:56,171] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:22:09.186372+00:00
[2022-01-31 20:22:56,192] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.706 seconds
[2022-01-31 20:23:28,090] {processor.py:163} INFO - Started process (PID=45212) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:23:28,090] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:23:28,090] {logging_mixin.py:109} INFO - [2022-01-31 20:23:28,090] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:23:28,496] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:23:28,550] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:23:28,553] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:23:28,559] {logging_mixin.py:109} INFO - [2022-01-31 20:23:28,559] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:23:28,575] {logging_mixin.py:109} INFO - [2022-01-31 20:23:28,574] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:22:09.186372+00:00
[2022-01-31 20:23:28,595] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.506 seconds
[2022-01-31 20:24:00,475] {processor.py:163} INFO - Started process (PID=45224) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:24:00,476] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:24:00,476] {logging_mixin.py:109} INFO - [2022-01-31 20:24:00,476] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:24:01,270] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:24:01,359] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:24:01,362] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:24:01,368] {logging_mixin.py:109} INFO - [2022-01-31 20:24:01,368] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:24:01,383] {logging_mixin.py:109} INFO - [2022-01-31 20:24:01,383] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:22:09.186372+00:00
[2022-01-31 20:24:01,393] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.918 seconds
[2022-01-31 20:24:33,474] {processor.py:163} INFO - Started process (PID=45227) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:24:33,474] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:24:33,475] {logging_mixin.py:109} INFO - [2022-01-31 20:24:33,475] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:24:34,262] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:24:34,343] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:24:34,346] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:24:34,352] {logging_mixin.py:109} INFO - [2022-01-31 20:24:34,352] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:24:34,368] {logging_mixin.py:109} INFO - [2022-01-31 20:24:34,368] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:22:09.186372+00:00
[2022-01-31 20:24:34,379] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.905 seconds
[2022-01-31 20:25:06,194] {processor.py:163} INFO - Started process (PID=45229) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:25:06,194] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:25:06,194] {logging_mixin.py:109} INFO - [2022-01-31 20:25:06,194] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:25:06,591] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:25:06,645] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:25:06,647] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:25:06,654] {logging_mixin.py:109} INFO - [2022-01-31 20:25:06,654] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:25:06,671] {logging_mixin.py:109} INFO - [2022-01-31 20:25:06,670] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:22:09.186372+00:00
[2022-01-31 20:25:06,692] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.498 seconds
[2022-01-31 20:25:38,627] {processor.py:163} INFO - Started process (PID=45238) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:25:38,628] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:25:38,628] {logging_mixin.py:109} INFO - [2022-01-31 20:25:38,628] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:25:39,444] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:25:39,526] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:25:39,529] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:25:39,535] {logging_mixin.py:109} INFO - [2022-01-31 20:25:39,535] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:25:39,550] {logging_mixin.py:109} INFO - [2022-01-31 20:25:39,550] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:25:09.186372+00:00
[2022-01-31 20:25:39,561] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.934 seconds
[2022-01-31 20:26:11,572] {processor.py:163} INFO - Started process (PID=45243) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:26:11,572] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:26:11,572] {logging_mixin.py:109} INFO - [2022-01-31 20:26:11,572] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:26:12,400] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:26:12,487] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:26:12,489] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:26:12,496] {logging_mixin.py:109} INFO - [2022-01-31 20:26:12,496] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:26:12,512] {logging_mixin.py:109} INFO - [2022-01-31 20:26:12,511] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:25:09.186372+00:00
[2022-01-31 20:26:12,522] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.951 seconds
[2022-01-31 20:26:45,111] {processor.py:163} INFO - Started process (PID=45249) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:26:45,111] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:26:45,112] {logging_mixin.py:109} INFO - [2022-01-31 20:26:45,112] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:26:45,921] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:26:46,006] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:26:46,009] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:26:46,016] {logging_mixin.py:109} INFO - [2022-01-31 20:26:46,016] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:26:46,031] {logging_mixin.py:109} INFO - [2022-01-31 20:26:46,031] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:25:09.186372+00:00
[2022-01-31 20:26:46,042] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.931 seconds
[2022-01-31 20:27:18,224] {processor.py:163} INFO - Started process (PID=45250) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:27:18,225] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:27:18,226] {logging_mixin.py:109} INFO - [2022-01-31 20:27:18,226] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:27:18,858] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:27:18,932] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:27:18,935] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:27:18,943] {logging_mixin.py:109} INFO - [2022-01-31 20:27:18,943] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:27:18,965] {logging_mixin.py:109} INFO - [2022-01-31 20:27:18,965] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:25:09.186372+00:00
[2022-01-31 20:27:18,986] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.763 seconds
[2022-01-31 20:27:51,679] {processor.py:163} INFO - Started process (PID=45261) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:27:51,680] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:27:51,681] {logging_mixin.py:109} INFO - [2022-01-31 20:27:51,681] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:27:52,545] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:27:52,653] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:27:52,656] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:27:52,663] {logging_mixin.py:109} INFO - [2022-01-31 20:27:52,662] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:27:52,678] {logging_mixin.py:109} INFO - [2022-01-31 20:27:52,678] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:25:09.186372+00:00
[2022-01-31 20:27:52,688] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.009 seconds
[2022-01-31 20:28:24,692] {processor.py:163} INFO - Started process (PID=45264) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:28:24,692] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:28:24,693] {logging_mixin.py:109} INFO - [2022-01-31 20:28:24,693] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:28:25,142] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:28:25,206] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:28:25,208] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:28:25,217] {logging_mixin.py:109} INFO - [2022-01-31 20:28:25,216] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:28:25,235] {logging_mixin.py:109} INFO - [2022-01-31 20:28:25,235] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:28:09.186372+00:00
[2022-01-31 20:28:25,246] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.556 seconds
[2022-01-31 20:28:57,238] {processor.py:163} INFO - Started process (PID=45266) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:28:57,238] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:28:57,238] {logging_mixin.py:109} INFO - [2022-01-31 20:28:57,238] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:28:57,845] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:28:57,900] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:28:57,902] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:28:57,909] {logging_mixin.py:109} INFO - [2022-01-31 20:28:57,909] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:28:57,925] {logging_mixin.py:109} INFO - [2022-01-31 20:28:57,924] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:28:09.186372+00:00
[2022-01-31 20:28:57,945] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.707 seconds
[2022-01-31 20:29:30,515] {processor.py:163} INFO - Started process (PID=45270) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:29:30,516] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:29:30,517] {logging_mixin.py:109} INFO - [2022-01-31 20:29:30,516] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:29:31,309] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:29:31,392] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:29:31,395] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:29:31,401] {logging_mixin.py:109} INFO - [2022-01-31 20:29:31,401] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:29:31,416] {logging_mixin.py:109} INFO - [2022-01-31 20:29:31,416] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:28:09.186372+00:00
[2022-01-31 20:29:31,426] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.911 seconds
[2022-01-31 20:30:03,373] {processor.py:163} INFO - Started process (PID=45277) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:30:03,374] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:30:03,374] {logging_mixin.py:109} INFO - [2022-01-31 20:30:03,374] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:30:03,878] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:30:03,936] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:30:03,938] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:30:03,946] {logging_mixin.py:109} INFO - [2022-01-31 20:30:03,946] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:30:03,963] {logging_mixin.py:109} INFO - [2022-01-31 20:30:03,963] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:28:09.186372+00:00
[2022-01-31 20:30:03,984] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.611 seconds
[2022-01-31 20:30:35,940] {processor.py:163} INFO - Started process (PID=45282) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:30:35,940] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:30:35,940] {logging_mixin.py:109} INFO - [2022-01-31 20:30:35,940] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:30:36,537] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:30:36,593] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:30:36,595] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:30:36,602] {logging_mixin.py:109} INFO - [2022-01-31 20:30:36,602] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:30:36,618] {logging_mixin.py:109} INFO - [2022-01-31 20:30:36,618] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:28:09.186372+00:00
[2022-01-31 20:30:36,628] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.688 seconds
[2022-01-31 20:31:09,381] {processor.py:163} INFO - Started process (PID=45294) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:31:09,381] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:31:09,382] {logging_mixin.py:109} INFO - [2022-01-31 20:31:09,382] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:31:10,168] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:31:10,262] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:31:10,264] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:31:10,271] {logging_mixin.py:109} INFO - [2022-01-31 20:31:10,271] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:31:10,286] {logging_mixin.py:109} INFO - [2022-01-31 20:31:10,286] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:28:10.286069+00:00
[2022-01-31 20:31:10,297] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.917 seconds
[2022-01-31 20:31:42,160] {processor.py:163} INFO - Started process (PID=45299) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:31:42,160] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:31:42,160] {logging_mixin.py:109} INFO - [2022-01-31 20:31:42,160] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:31:42,583] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:31:42,661] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:31:42,664] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:31:42,674] {logging_mixin.py:109} INFO - [2022-01-31 20:31:42,674] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:31:42,696] {logging_mixin.py:109} INFO - [2022-01-31 20:31:42,696] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:31:10.286069+00:00
[2022-01-31 20:31:42,709] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.550 seconds
[2022-01-31 20:32:14,666] {processor.py:163} INFO - Started process (PID=45304) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:32:14,666] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:32:14,666] {logging_mixin.py:109} INFO - [2022-01-31 20:32:14,666] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:32:15,482] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:32:15,568] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:32:15,571] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:32:15,578] {logging_mixin.py:109} INFO - [2022-01-31 20:32:15,578] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:32:15,594] {logging_mixin.py:109} INFO - [2022-01-31 20:32:15,593] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:31:10.286069+00:00
[2022-01-31 20:32:15,604] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.939 seconds
[2022-01-31 20:32:47,524] {processor.py:163} INFO - Started process (PID=45307) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:32:47,524] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:32:47,525] {logging_mixin.py:109} INFO - [2022-01-31 20:32:47,525] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:32:48,298] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:32:48,396] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:32:48,398] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:32:48,405] {logging_mixin.py:109} INFO - [2022-01-31 20:32:48,405] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:32:48,420] {logging_mixin.py:109} INFO - [2022-01-31 20:32:48,420] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:31:10.286069+00:00
[2022-01-31 20:32:48,429] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.906 seconds
[2022-01-31 20:33:20,249] {processor.py:163} INFO - Started process (PID=45313) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:33:20,250] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:33:20,250] {logging_mixin.py:109} INFO - [2022-01-31 20:33:20,250] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:33:20,646] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:33:20,699] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:33:20,702] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:33:20,709] {logging_mixin.py:109} INFO - [2022-01-31 20:33:20,708] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:33:20,723] {logging_mixin.py:109} INFO - [2022-01-31 20:33:20,723] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:31:10.286069+00:00
[2022-01-31 20:33:20,744] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.495 seconds
[2022-01-31 20:33:52,641] {processor.py:163} INFO - Started process (PID=45316) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:33:52,642] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:33:52,642] {logging_mixin.py:109} INFO - [2022-01-31 20:33:52,642] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:33:53,431] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:33:53,517] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:33:53,522] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:33:53,529] {logging_mixin.py:109} INFO - [2022-01-31 20:33:53,529] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:33:53,546] {logging_mixin.py:109} INFO - [2022-01-31 20:33:53,546] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:31:10.286069+00:00
[2022-01-31 20:33:53,558] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.917 seconds
[2022-01-31 20:34:25,654] {processor.py:163} INFO - Started process (PID=45319) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:34:25,654] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:34:25,655] {logging_mixin.py:109} INFO - [2022-01-31 20:34:25,655] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:34:26,154] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:34:26,210] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:34:26,214] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:34:26,221] {logging_mixin.py:109} INFO - [2022-01-31 20:34:26,221] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:34:26,238] {logging_mixin.py:109} INFO - [2022-01-31 20:34:26,238] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:34:10.286069+00:00
[2022-01-31 20:34:26,248] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.595 seconds
[2022-01-31 20:34:58,376] {processor.py:163} INFO - Started process (PID=45324) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:34:58,376] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:34:58,376] {logging_mixin.py:109} INFO - [2022-01-31 20:34:58,376] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:34:59,207] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:34:59,292] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:34:59,295] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:34:59,301] {logging_mixin.py:109} INFO - [2022-01-31 20:34:59,301] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:34:59,317] {logging_mixin.py:109} INFO - [2022-01-31 20:34:59,316] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:34:10.286069+00:00
[2022-01-31 20:34:59,327] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.952 seconds
[2022-01-31 20:35:32,014] {processor.py:163} INFO - Started process (PID=45332) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:35:32,015] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:35:32,015] {logging_mixin.py:109} INFO - [2022-01-31 20:35:32,015] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:35:32,429] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:35:32,483] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:35:32,485] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:35:32,492] {logging_mixin.py:109} INFO - [2022-01-31 20:35:32,492] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:35:32,509] {logging_mixin.py:109} INFO - [2022-01-31 20:35:32,509] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:34:10.286069+00:00
[2022-01-31 20:35:32,530] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.516 seconds
[2022-01-31 20:36:05,428] {processor.py:163} INFO - Started process (PID=45362) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:36:05,429] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:36:05,429] {logging_mixin.py:109} INFO - [2022-01-31 20:36:05,429] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:36:06,262] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:36:06,351] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:36:06,353] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:36:06,360] {logging_mixin.py:109} INFO - [2022-01-31 20:36:06,359] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:36:06,375] {logging_mixin.py:109} INFO - [2022-01-31 20:36:06,375] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:34:10.286069+00:00
[2022-01-31 20:36:06,384] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.957 seconds
[2022-01-31 20:36:38,216] {processor.py:163} INFO - Started process (PID=45401) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:36:38,216] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:36:38,216] {logging_mixin.py:109} INFO - [2022-01-31 20:36:38,216] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:36:38,644] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:36:38,700] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:36:38,702] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:36:38,709] {logging_mixin.py:109} INFO - [2022-01-31 20:36:38,708] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:36:38,724] {logging_mixin.py:109} INFO - [2022-01-31 20:36:38,724] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:34:10.286069+00:00
[2022-01-31 20:36:38,745] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.530 seconds
[2022-01-31 20:37:10,714] {processor.py:163} INFO - Started process (PID=45439) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:37:10,714] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:37:10,715] {logging_mixin.py:109} INFO - [2022-01-31 20:37:10,715] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:37:11,537] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:37:11,626] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:37:11,628] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:37:11,635] {logging_mixin.py:109} INFO - [2022-01-31 20:37:11,635] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:37:11,650] {logging_mixin.py:109} INFO - [2022-01-31 20:37:11,650] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:34:11.649950+00:00
[2022-01-31 20:37:11,660] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.946 seconds
[2022-01-31 20:37:44,172] {processor.py:163} INFO - Started process (PID=45479) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:37:44,172] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:37:44,173] {logging_mixin.py:109} INFO - [2022-01-31 20:37:44,173] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:37:45,108] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:37:45,332] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:37:45,336] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:37:45,345] {logging_mixin.py:109} INFO - [2022-01-31 20:37:45,344] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:37:45,382] {logging_mixin.py:109} INFO - [2022-01-31 20:37:45,382] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:37:11.649950+00:00
[2022-01-31 20:37:45,407] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.235 seconds
[2022-01-31 20:38:18,849] {processor.py:163} INFO - Started process (PID=45522) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:38:18,849] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:38:18,849] {logging_mixin.py:109} INFO - [2022-01-31 20:38:18,849] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:38:19,304] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:38:19,372] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:38:19,375] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:38:19,382] {logging_mixin.py:109} INFO - [2022-01-31 20:38:19,382] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:38:19,403] {logging_mixin.py:109} INFO - [2022-01-31 20:38:19,402] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:37:11.649950+00:00
[2022-01-31 20:38:19,422] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.575 seconds
[2022-01-31 20:38:52,554] {processor.py:163} INFO - Started process (PID=45568) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:38:52,555] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:38:52,555] {logging_mixin.py:109} INFO - [2022-01-31 20:38:52,555] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:38:53,446] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:38:53,555] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:38:53,558] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:38:53,575] {logging_mixin.py:109} INFO - [2022-01-31 20:38:53,575] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:38:53,627] {logging_mixin.py:109} INFO - [2022-01-31 20:38:53,627] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:37:11.649950+00:00
[2022-01-31 20:38:53,661] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.109 seconds
[2022-01-31 20:39:26,099] {processor.py:163} INFO - Started process (PID=45605) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:39:26,099] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:39:26,099] {logging_mixin.py:109} INFO - [2022-01-31 20:39:26,099] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:39:26,735] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:39:26,889] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:39:26,967] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:39:26,980] {logging_mixin.py:109} INFO - [2022-01-31 20:39:26,980] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:39:27,003] {logging_mixin.py:109} INFO - [2022-01-31 20:39:27,003] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:37:11.649950+00:00
[2022-01-31 20:39:27,023] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.925 seconds
[2022-01-31 20:39:59,035] {processor.py:163} INFO - Started process (PID=45657) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:39:59,035] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:39:59,036] {logging_mixin.py:109} INFO - [2022-01-31 20:39:59,036] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:39:59,882] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:39:59,967] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:39:59,969] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:39:59,977] {logging_mixin.py:109} INFO - [2022-01-31 20:39:59,977] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:39:59,993] {logging_mixin.py:109} INFO - [2022-01-31 20:39:59,993] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:37:11.649950+00:00
[2022-01-31 20:40:00,003] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.968 seconds
[2022-01-31 20:40:33,678] {processor.py:163} INFO - Started process (PID=45698) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:40:33,679] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:40:33,679] {logging_mixin.py:109} INFO - [2022-01-31 20:40:33,679] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:40:34,089] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:40:34,145] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:40:34,147] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:40:34,155] {logging_mixin.py:109} INFO - [2022-01-31 20:40:34,154] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:40:34,171] {logging_mixin.py:109} INFO - [2022-01-31 20:40:34,171] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:40:11.649950+00:00
[2022-01-31 20:40:34,194] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.517 seconds
[2022-01-31 20:41:06,656] {processor.py:163} INFO - Started process (PID=45742) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:41:06,656] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:41:06,657] {logging_mixin.py:109} INFO - [2022-01-31 20:41:06,657] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:41:07,352] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:41:07,442] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:41:07,445] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:41:07,451] {logging_mixin.py:109} INFO - [2022-01-31 20:41:07,451] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:41:07,466] {logging_mixin.py:109} INFO - [2022-01-31 20:41:07,466] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:40:11.649950+00:00
[2022-01-31 20:41:07,475] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.820 seconds
[2022-01-31 20:41:40,026] {processor.py:163} INFO - Started process (PID=45782) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:41:40,027] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:41:40,027] {logging_mixin.py:109} INFO - [2022-01-31 20:41:40,027] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:41:40,791] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:41:40,928] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:41:40,933] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:41:40,949] {logging_mixin.py:109} INFO - [2022-01-31 20:41:40,949] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:41:40,984] {logging_mixin.py:109} INFO - [2022-01-31 20:41:40,984] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:40:11.649950+00:00
[2022-01-31 20:41:41,040] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.014 seconds
[2022-01-31 20:42:13,384] {processor.py:163} INFO - Started process (PID=45825) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:42:13,384] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:42:13,385] {logging_mixin.py:109} INFO - [2022-01-31 20:42:13,385] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:42:14,213] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:42:14,312] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:42:14,315] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:42:14,323] {logging_mixin.py:109} INFO - [2022-01-31 20:42:14,322] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:42:14,340] {logging_mixin.py:109} INFO - [2022-01-31 20:42:14,340] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:40:11.649950+00:00
[2022-01-31 20:42:14,351] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.968 seconds
[2022-01-31 20:42:47,539] {processor.py:163} INFO - Started process (PID=45886) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:42:47,539] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:42:47,540] {logging_mixin.py:109} INFO - [2022-01-31 20:42:47,540] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:42:48,413] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:42:48,515] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:42:48,517] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:42:48,524] {logging_mixin.py:109} INFO - [2022-01-31 20:42:48,524] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:42:48,539] {logging_mixin.py:109} INFO - [2022-01-31 20:42:48,539] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:40:11.649950+00:00
[2022-01-31 20:42:48,549] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.011 seconds
[2022-01-31 20:43:07,374] {processor.py:163} INFO - Started process (PID=45909) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:43:07,374] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:43:07,374] {logging_mixin.py:109} INFO - [2022-01-31 20:43:07,374] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:43:08,247] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:43:08,369] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:43:08,372] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:43:08,379] {logging_mixin.py:109} INFO - [2022-01-31 20:43:08,379] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:43:08,396] {logging_mixin.py:109} INFO - [2022-01-31 20:43:08,396] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:40:11.649950+00:00
[2022-01-31 20:43:08,417] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.045 seconds
[2022-01-31 20:43:41,730] {processor.py:163} INFO - Started process (PID=45959) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:43:41,731] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:43:41,731] {logging_mixin.py:109} INFO - [2022-01-31 20:43:41,731] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:43:42,611] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:43:42,697] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:43:42,699] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:43:42,706] {logging_mixin.py:109} INFO - [2022-01-31 20:43:42,706] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:43:42,721] {logging_mixin.py:109} INFO - [2022-01-31 20:43:42,721] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:43:11.649950+00:00
[2022-01-31 20:43:42,732] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.002 seconds
[2022-01-31 20:44:11,909] {processor.py:163} INFO - Started process (PID=45998) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:44:11,910] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:44:11,910] {logging_mixin.py:109} INFO - [2022-01-31 20:44:11,910] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:44:12,343] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:44:12,398] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:44:12,400] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:44:12,407] {logging_mixin.py:109} INFO - [2022-01-31 20:44:12,407] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:44:12,422] {logging_mixin.py:109} INFO - [2022-01-31 20:44:12,422] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:43:11.649950+00:00
[2022-01-31 20:44:12,443] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.534 seconds
[2022-01-31 20:44:45,644] {processor.py:163} INFO - Started process (PID=46015) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:44:45,644] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:44:45,645] {logging_mixin.py:109} INFO - [2022-01-31 20:44:45,645] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:44:46,480] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:44:46,568] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:44:46,570] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:44:46,577] {logging_mixin.py:109} INFO - [2022-01-31 20:44:46,577] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:44:46,594] {logging_mixin.py:109} INFO - [2022-01-31 20:44:46,594] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:43:11.649950+00:00
[2022-01-31 20:44:46,604] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.961 seconds
[2022-01-31 20:45:19,973] {processor.py:163} INFO - Started process (PID=46031) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:45:19,973] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:45:19,974] {logging_mixin.py:109} INFO - [2022-01-31 20:45:19,973] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:45:21,191] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:45:21,283] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:45:21,286] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:45:21,294] {logging_mixin.py:109} INFO - [2022-01-31 20:45:21,294] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:45:21,314] {logging_mixin.py:109} INFO - [2022-01-31 20:45:21,313] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:43:11.649950+00:00
[2022-01-31 20:45:21,327] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.355 seconds
[2022-01-31 20:45:54,856] {processor.py:163} INFO - Started process (PID=46039) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:45:54,857] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:45:54,857] {logging_mixin.py:109} INFO - [2022-01-31 20:45:54,857] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:45:55,987] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:45:56,083] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:45:56,087] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:45:56,095] {logging_mixin.py:109} INFO - [2022-01-31 20:45:56,094] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:45:56,114] {logging_mixin.py:109} INFO - [2022-01-31 20:45:56,113] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:43:11.649950+00:00
[2022-01-31 20:45:56,126] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.271 seconds
[2022-01-31 20:46:30,107] {processor.py:163} INFO - Started process (PID=46057) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:46:30,108] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:46:30,109] {logging_mixin.py:109} INFO - [2022-01-31 20:46:30,109] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:46:30,552] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:46:30,614] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:46:30,617] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:46:30,625] {logging_mixin.py:109} INFO - [2022-01-31 20:46:30,624] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:46:30,645] {logging_mixin.py:109} INFO - [2022-01-31 20:46:30,645] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:46:11.649950+00:00
[2022-01-31 20:46:30,661] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.555 seconds
[2022-01-31 20:47:04,222] {processor.py:163} INFO - Started process (PID=46059) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:47:04,222] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:47:04,222] {logging_mixin.py:109} INFO - [2022-01-31 20:47:04,222] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:47:04,884] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:47:04,972] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:47:04,976] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:47:04,993] {logging_mixin.py:109} INFO - [2022-01-31 20:47:04,993] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:47:05,016] {logging_mixin.py:109} INFO - [2022-01-31 20:47:05,016] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:46:11.649950+00:00
[2022-01-31 20:47:05,094] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.873 seconds
[2022-01-31 20:47:38,535] {processor.py:163} INFO - Started process (PID=46064) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:47:38,537] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:47:38,541] {logging_mixin.py:109} INFO - [2022-01-31 20:47:38,540] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:47:40,092] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:47:40,215] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:47:40,219] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:47:40,233] {logging_mixin.py:109} INFO - [2022-01-31 20:47:40,232] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:47:40,254] {logging_mixin.py:109} INFO - [2022-01-31 20:47:40,254] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:46:11.649950+00:00
[2022-01-31 20:47:40,270] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.735 seconds
[2022-01-31 20:48:13,569] {processor.py:163} INFO - Started process (PID=46066) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:48:13,570] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:48:13,571] {logging_mixin.py:109} INFO - [2022-01-31 20:48:13,570] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:48:15,382] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:48:15,541] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:48:15,546] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:48:15,561] {logging_mixin.py:109} INFO - [2022-01-31 20:48:15,561] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:48:15,601] {logging_mixin.py:109} INFO - [2022-01-31 20:48:15,601] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:46:11.649950+00:00
[2022-01-31 20:48:15,629] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 2.064 seconds
[2022-01-31 20:48:50,700] {processor.py:163} INFO - Started process (PID=46092) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:48:50,701] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:48:50,701] {logging_mixin.py:109} INFO - [2022-01-31 20:48:50,701] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:48:51,631] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:48:51,727] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:48:51,730] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:48:51,737] {logging_mixin.py:109} INFO - [2022-01-31 20:48:51,737] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:48:51,754] {logging_mixin.py:109} INFO - [2022-01-31 20:48:51,754] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:46:11.649950+00:00
[2022-01-31 20:48:51,764] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.065 seconds
[2022-01-31 20:49:23,847] {processor.py:163} INFO - Started process (PID=46133) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:49:23,848] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:49:23,848] {logging_mixin.py:109} INFO - [2022-01-31 20:49:23,848] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:49:24,298] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:49:24,377] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:49:24,379] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:49:24,386] {logging_mixin.py:109} INFO - [2022-01-31 20:49:24,385] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:49:24,401] {logging_mixin.py:109} INFO - [2022-01-31 20:49:24,401] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:49:11.649950+00:00
[2022-01-31 20:49:24,420] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.574 seconds
[2022-01-31 20:49:57,047] {processor.py:163} INFO - Started process (PID=46179) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:49:57,048] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:49:57,048] {logging_mixin.py:109} INFO - [2022-01-31 20:49:57,048] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:49:57,779] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:49:57,863] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:49:57,866] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:49:57,873] {logging_mixin.py:109} INFO - [2022-01-31 20:49:57,872] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:49:57,888] {logging_mixin.py:109} INFO - [2022-01-31 20:49:57,888] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:49:11.649950+00:00
[2022-01-31 20:49:57,898] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.851 seconds
[2022-01-31 20:50:29,915] {processor.py:163} INFO - Started process (PID=46223) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:50:29,916] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:50:29,917] {logging_mixin.py:109} INFO - [2022-01-31 20:50:29,916] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:50:30,531] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:50:30,637] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:50:30,640] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:50:30,650] {logging_mixin.py:109} INFO - [2022-01-31 20:50:30,649] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:50:30,666] {logging_mixin.py:109} INFO - [2022-01-31 20:50:30,666] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:49:11.649950+00:00
[2022-01-31 20:50:30,679] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.765 seconds
[2022-01-31 20:50:36,660] {processor.py:163} INFO - Started process (PID=46231) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:50:36,660] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:50:36,660] {logging_mixin.py:109} INFO - [2022-01-31 20:50:36,660] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:50:37,285] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:50:37,362] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:50:37,364] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:50:37,375] {logging_mixin.py:109} INFO - [2022-01-31 20:50:37,375] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:50:37,409] {logging_mixin.py:109} INFO - [2022-01-31 20:50:37,409] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:49:11.649950+00:00
[2022-01-31 20:50:37,431] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.771 seconds
[2022-01-31 20:51:03,335] {processor.py:163} INFO - Started process (PID=46272) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:51:03,335] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:51:03,336] {logging_mixin.py:109} INFO - [2022-01-31 20:51:03,336] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:51:03,836] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:51:03,893] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:51:03,896] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:51:04,344] {logging_mixin.py:109} INFO - [2022-01-31 20:51:04,344] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:51:04,360] {logging_mixin.py:109} INFO - [2022-01-31 20:51:04,360] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:49:11.649950+00:00
[2022-01-31 20:51:04,372] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.038 seconds
[2022-01-31 20:51:37,088] {processor.py:163} INFO - Started process (PID=46276) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:51:37,089] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:51:37,089] {logging_mixin.py:109} INFO - [2022-01-31 20:51:37,089] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:51:38,076] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:51:38,182] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:51:38,184] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:51:38,191] {logging_mixin.py:109} INFO - [2022-01-31 20:51:38,191] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:51:38,206] {logging_mixin.py:109} INFO - [2022-01-31 20:51:38,206] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:49:11.649950+00:00
[2022-01-31 20:51:38,218] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.130 seconds
[2022-01-31 20:52:10,738] {processor.py:163} INFO - Started process (PID=46282) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:52:10,739] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:52:10,739] {logging_mixin.py:109} INFO - [2022-01-31 20:52:10,739] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:52:11,550] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:52:11,636] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:52:11,639] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:52:11,645] {logging_mixin.py:109} INFO - [2022-01-31 20:52:11,645] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:52:11,661] {logging_mixin.py:109} INFO - [2022-01-31 20:52:11,661] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:49:11.660891+00:00
[2022-01-31 20:52:11,671] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.934 seconds
[2022-01-31 20:52:43,628] {processor.py:163} INFO - Started process (PID=46289) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:52:43,628] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:52:43,629] {logging_mixin.py:109} INFO - [2022-01-31 20:52:43,629] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:52:44,024] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:52:44,078] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:52:44,080] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:52:44,087] {logging_mixin.py:109} INFO - [2022-01-31 20:52:44,087] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:52:44,102] {logging_mixin.py:109} INFO - [2022-01-31 20:52:44,102] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:52:11.660891+00:00
[2022-01-31 20:52:44,123] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.495 seconds
[2022-01-31 20:53:17,151] {processor.py:163} INFO - Started process (PID=46291) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:53:17,151] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:53:17,152] {logging_mixin.py:109} INFO - [2022-01-31 20:53:17,152] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:53:19,035] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:53:19,265] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:53:19,268] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:53:19,275] {logging_mixin.py:109} INFO - [2022-01-31 20:53:19,275] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:53:19,299] {logging_mixin.py:109} INFO - [2022-01-31 20:53:19,299] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:52:11.660891+00:00
[2022-01-31 20:53:19,316] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 2.166 seconds
[2022-01-31 20:53:53,018] {processor.py:163} INFO - Started process (PID=46303) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:53:53,020] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:53:53,021] {logging_mixin.py:109} INFO - [2022-01-31 20:53:53,021] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:53:54,092] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:53:54,184] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:53:54,187] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:53:54,195] {logging_mixin.py:109} INFO - [2022-01-31 20:53:54,195] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:53:54,213] {logging_mixin.py:109} INFO - [2022-01-31 20:53:54,213] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:52:11.660891+00:00
[2022-01-31 20:53:54,224] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.208 seconds
[2022-01-31 20:54:26,092] {processor.py:163} INFO - Started process (PID=46312) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:54:26,093] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:54:26,093] {logging_mixin.py:109} INFO - [2022-01-31 20:54:26,093] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:54:26,493] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:54:26,548] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:54:26,550] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:54:26,557] {logging_mixin.py:109} INFO - [2022-01-31 20:54:26,557] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:54:26,573] {logging_mixin.py:109} INFO - [2022-01-31 20:54:26,573] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:52:11.660891+00:00
[2022-01-31 20:54:26,594] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.502 seconds
[2022-01-31 20:55:00,001] {processor.py:163} INFO - Started process (PID=46315) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:55:00,002] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:55:00,002] {logging_mixin.py:109} INFO - [2022-01-31 20:55:00,002] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:55:01,518] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:55:01,620] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:55:01,622] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:55:01,629] {logging_mixin.py:109} INFO - [2022-01-31 20:55:01,629] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:55:01,645] {logging_mixin.py:109} INFO - [2022-01-31 20:55:01,645] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:52:11.660891+00:00
[2022-01-31 20:55:01,655] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 1.655 seconds
[2022-01-31 20:55:33,785] {processor.py:163} INFO - Started process (PID=46335) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:55:33,786] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:55:33,787] {logging_mixin.py:109} INFO - [2022-01-31 20:55:33,786] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:55:34,513] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:55:34,617] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:55:34,619] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:55:34,627] {logging_mixin.py:109} INFO - [2022-01-31 20:55:34,627] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:55:34,644] {logging_mixin.py:109} INFO - [2022-01-31 20:55:34,643] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:55:11.660891+00:00
[2022-01-31 20:55:34,654] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.869 seconds
[2022-01-31 20:56:06,711] {processor.py:163} INFO - Started process (PID=46361) to work on /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:56:06,712] {processor.py:642} INFO - Processing file /Users/user/Youtubed/dags/sdag.py for tasks to queue
[2022-01-31 20:56:06,713] {logging_mixin.py:109} INFO - [2022-01-31 20:56:06,713] {dagbag.py:500} INFO - Filling up the DagBag from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:56:07,531] {processor.py:654} INFO - DAG(s) dict_keys(['Spotify_Song_dag']) retrieved from /Users/user/Youtubed/dags/sdag.py
[2022-01-31 20:56:07,620] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'DagRun.serialized_dag' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:56:07,622] {logging_mixin.py:109} WARNING - /Users/user/Youtubed/YTVM/lib/python3.9/site-packages/sqlalchemy/orm/relationships.py:3435 SAWarning: relationship 'SerializedDagModel.dag_runs' will copy column serialized_dag.dag_id to column dag_run.dag_id, which conflicts with relationship(s): 'BaseXCom.dag_run' (copies xcom.dag_id to dag_run.dag_id). If this is not the intention, consider if these relationships should be linked with back_populates, or if viewonly=True should be applied to one or more if they are read-only. For the less common case that foreign key constraints are partially overlapping, the orm.foreign() annotation can be used to isolate the columns that should be written towards.   The 'overlaps' parameter may be used to remove this warning.
[2022-01-31 20:56:07,629] {logging_mixin.py:109} INFO - [2022-01-31 20:56:07,628] {dag.py:2396} INFO - Sync 1 DAGs
[2022-01-31 20:56:07,644] {logging_mixin.py:109} INFO - [2022-01-31 20:56:07,644] {dag.py:2935} INFO - Setting next_dagrun for Spotify_Song_dag to 2022-01-31T20:55:11.660891+00:00
[2022-01-31 20:56:07,654] {processor.py:171} INFO - Processing /Users/user/Youtubed/dags/sdag.py took 0.944 seconds
